ppm_check_header:
	 presence de P5 ou P6 dans l'entete... PASS
	 presence des dimensions HxV dans l'entete... 50x50
	 presence de 255 dans l'entete... PASS


[DHT]
		Huffman table type DC
		path: 00 symbol: 0
		path: 010 symbol: 1
		path: 011 symbol: 2
		path: 100 symbol: 3
		path: 101 symbol: 4
		path: 110 symbol: 5
		path: 1110 symbol: 6
		path: 11110 symbol: 7
		path: 111110 symbol: 8
		path: 1111110 symbol: 9
		path: 11111110 symbol: a
		path: 111111110 symbol: b


[DHT]
		Huffman table type AC
		path: 00 symbol: 1
		path: 01 symbol: 2
		path: 100 symbol: 3
		path: 1010 symbol: 0
		path: 1011 symbol: 4
		path: 1100 symbol: 11
		path: 11010 symbol: 5
		path: 11011 symbol: 12
		path: 11100 symbol: 21
		path: 111010 symbol: 31
		path: 111011 symbol: 41
		path: 1111000 symbol: 6
		path: 1111001 symbol: 13
		path: 1111010 symbol: 51
		path: 1111011 symbol: 61
		path: 11111000 symbol: 7
		path: 11111001 symbol: 22
		path: 11111010 symbol: 71
		path: 111110110 symbol: 14
		path: 111110111 symbol: 32
		path: 111111000 symbol: 81
		path: 111111001 symbol: 91
		path: 111111010 symbol: a1
		path: 1111110110 symbol: 8
		path: 1111110111 symbol: 23
		path: 1111111000 symbol: 42
		path: 1111111001 symbol: b1
		path: 1111111010 symbol: c1
		path: 11111110110 symbol: 15
		path: 11111110111 symbol: 52
		path: 11111111000 symbol: d1
		path: 11111111001 symbol: f0
		path: 111111110100 symbol: 24
		path: 111111110101 symbol: 33
		path: 111111110110 symbol: 62
		path: 111111110111 symbol: 72
		path: 111111111000000 symbol: 82
		path: 1111111110000010 symbol: 9
		path: 1111111110000011 symbol: a
		path: 1111111110000100 symbol: 16
		path: 1111111110000101 symbol: 17
		path: 1111111110000110 symbol: 18
		path: 1111111110000111 symbol: 19
		path: 1111111110001000 symbol: 1a
		path: 1111111110001001 symbol: 25
		path: 1111111110001010 symbol: 26
		path: 1111111110001011 symbol: 27
		path: 1111111110001100 symbol: 28
		path: 1111111110001101 symbol: 29
		path: 1111111110001110 symbol: 2a
		path: 1111111110001111 symbol: 34
		path: 1111111110010000 symbol: 35
		path: 1111111110010001 symbol: 36
		path: 1111111110010010 symbol: 37
		path: 1111111110010011 symbol: 38
		path: 1111111110010100 symbol: 39
		path: 1111111110010101 symbol: 3a
		path: 1111111110010110 symbol: 43
		path: 1111111110010111 symbol: 44
		path: 1111111110011000 symbol: 45
		path: 1111111110011001 symbol: 46
		path: 1111111110011010 symbol: 47
		path: 1111111110011011 symbol: 48
		path: 1111111110011100 symbol: 49
		path: 1111111110011101 symbol: 4a
		path: 1111111110011110 symbol: 53
		path: 1111111110011111 symbol: 54
		path: 1111111110100000 symbol: 55
		path: 1111111110100001 symbol: 56
		path: 1111111110100010 symbol: 57
		path: 1111111110100011 symbol: 58
		path: 1111111110100100 symbol: 59
		path: 1111111110100101 symbol: 5a
		path: 1111111110100110 symbol: 63
		path: 1111111110100111 symbol: 64
		path: 1111111110101000 symbol: 65
		path: 1111111110101001 symbol: 66
		path: 1111111110101010 symbol: 67
		path: 1111111110101011 symbol: 68
		path: 1111111110101100 symbol: 69
		path: 1111111110101101 symbol: 6a
		path: 1111111110101110 symbol: 73
		path: 1111111110101111 symbol: 74
		path: 1111111110110000 symbol: 75
		path: 1111111110110001 symbol: 76
		path: 1111111110110010 symbol: 77
		path: 1111111110110011 symbol: 78
		path: 1111111110110100 symbol: 79
		path: 1111111110110101 symbol: 7a
		path: 1111111110110110 symbol: 83
		path: 1111111110110111 symbol: 84
		path: 1111111110111000 symbol: 85
		path: 1111111110111001 symbol: 86
		path: 1111111110111010 symbol: 87
		path: 1111111110111011 symbol: 88
		path: 1111111110111100 symbol: 89
		path: 1111111110111101 symbol: 8a
		path: 1111111110111110 symbol: 92
		path: 1111111110111111 symbol: 93
		path: 1111111111000000 symbol: 94
		path: 1111111111000001 symbol: 95
		path: 1111111111000010 symbol: 96
		path: 1111111111000011 symbol: 97
		path: 1111111111000100 symbol: 98
		path: 1111111111000101 symbol: 99
		path: 1111111111000110 symbol: 9a
		path: 1111111111000111 symbol: a2
		path: 1111111111001000 symbol: a3
		path: 1111111111001001 symbol: a4
		path: 1111111111001010 symbol: a5
		path: 1111111111001011 symbol: a6
		path: 1111111111001100 symbol: a7
		path: 1111111111001101 symbol: a8
		path: 1111111111001110 symbol: a9
		path: 1111111111001111 symbol: aa
		path: 1111111111010000 symbol: b2
		path: 1111111111010001 symbol: b3
		path: 1111111111010010 symbol: b4
		path: 1111111111010011 symbol: b5
		path: 1111111111010100 symbol: b6
		path: 1111111111010101 symbol: b7
		path: 1111111111010110 symbol: b8
		path: 1111111111010111 symbol: b9
		path: 1111111111011000 symbol: ba
		path: 1111111111011001 symbol: c2
		path: 1111111111011010 symbol: c3
		path: 1111111111011011 symbol: c4
		path: 1111111111011100 symbol: c5
		path: 1111111111011101 symbol: c6
		path: 1111111111011110 symbol: c7
		path: 1111111111011111 symbol: c8
		path: 1111111111100000 symbol: c9
		path: 1111111111100001 symbol: ca
		path: 1111111111100010 symbol: d2
		path: 1111111111100011 symbol: d3
		path: 1111111111100100 symbol: d4
		path: 1111111111100101 symbol: d5
		path: 1111111111100110 symbol: d6
		path: 1111111111100111 symbol: d7
		path: 1111111111101000 symbol: d8
		path: 1111111111101001 symbol: d9
		path: 1111111111101010 symbol: da
		path: 1111111111101011 symbol: e1
		path: 1111111111101100 symbol: e2
		path: 1111111111101101 symbol: e3
		path: 1111111111101110 symbol: e4
		path: 1111111111101111 symbol: e5
		path: 1111111111110000 symbol: e6
		path: 1111111111110001 symbol: e7
		path: 1111111111110010 symbol: e8
		path: 1111111111110011 symbol: e9
		path: 1111111111110100 symbol: ea
		path: 1111111111110101 symbol: f1
		path: 1111111111110110 symbol: f2
		path: 1111111111110111 symbol: f3
		path: 1111111111111000 symbol: f4
		path: 1111111111111001 symbol: f5
		path: 1111111111111010 symbol: f6
		path: 1111111111111011 symbol: f7
		path: 1111111111111100 symbol: f8
		path: 1111111111111101 symbol: f9
		path: 1111111111111110 symbol: fa

[MCU #0] Valeurs "niveaux de gris" initiales:
d7 9e a9 56 fe d5 8b 13    
a5 25 dc 76 21 b1 b3 1f    
69 b8 24 e2 ba 6b e2 24    
53 3f f1 ea 81 a4 6d df    
31 a1 93 1d 2c f7 81 31    
92 65 10 33 36 d5 3b 55    
7d f6 d5 65 5d 61 0b 01    
ee 3c 3c 2a 3d d0 fd 41    

[MCU #0] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	d7 9e a9 56 fe d5 8b 13 
	a5 25 dc 76 21 b1 b3 1f 
	69 b8 24 e2 ba 6b e2 24 
	53 3f f1 ea 81 a4 6d df 
	31 a1 93 1d 2c f7 81 31 
	92 65 10 33 36 d5 3b 55 
	7d f6 d5 65 5d 61 0b 01 
	ee 3c 3c 2a 3d d0 fd 41 

[MCU #0] Downsampling:
[Y]:
	d7 9e a9 56 fe d5 8b 13 
	a5 25 dc 76 21 b1 b3 1f 
	69 b8 24 e2 ba 6b e2 24 
	53 3f f1 ea 81 a4 6d df 
	31 a1 93 1d 2c f7 81 31 
	92 65 10 33 36 d5 3b 55 
	7d f6 d5 65 5d 61 0b 01 
	ee 3c 3c 2a 3d d0 fd 41 

[MCU #0] DCT:
[Y]:
	ffeb 003e ffd3 0092 ff62 0046 003c ffea 
	006b fff2 ff93 ffeb 0023 002a ffe7 003e 
	0017 005d 0030 0090 fff8 0033 fff7 0063 
	ffbd 0046 0003 003f ffc7 ff77 005d fff4 
	0052 ffa9 000e 001a fff0 fffd 0047 002d 
	0054 0060 ff9f ff93 0064 ff92 ffd5 000c 
	0006 ffad 0022 009d 0054 fff8 ff84 ffe0 
	fff7 004f ffd6 0028 ffa4 ffb5 ff75 0007 

[MCU #0] ZZ:
[Y]:
	ffeb 003e 006b 0017 fff2 ffd3 0092 ff93 
	005d ffbd 0052 0046 0030 ffeb ff62 0046 
	0023 0090 0003 ffa9 0054 0006 0060 000e 
	003f fff8 002a 003c ffea ffe7 0033 ffc7 
	001a ff9f ffad fff7 004f 0022 ff93 fff0 
	ff77 fff7 003e 0063 005d fffd 0064 009d 
	ffd6 0028 0054 ff92 0047 fff4 002d ffd5 
	fff8 ffa4 ffb5 ff84 000c ffe0 ff75 0007 

[MCU #0] Quantification:
[Y]:
	fffc 0014 0023 0004 fffe fffd 0009 fffa 
	0017 fff0 0014 000b 0006 ffff fff8 0004 
	0008 0024 0000 fff4 0007 0000 0004 0000 
	000f ffff 0006 0006 ffff 0000 0002 fffd 
	0005 fff3 fff9 0000 0003 0001 fffd 0000 
	ffed 0000 0003 0005 0003 0000 0002 0005 
	fffe 0002 0003 fffc 0002 0000 0001 ffff 
	0000 fffd fffe fffc 0000 ffff fffc 0000 

[MCU #0] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -4, magnitude = 3, index = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits

AC:
	value = 20, magnitude = 5, index = 20
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 20 over 5 bits
	value = 35, magnitude = 6, index = 35
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 35 over 6 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 23, magnitude = 5, index = 23
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 23 over 5 bits
	value = -16, magnitude = 5, index = 15
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 15 over 5 bits
	value = 20, magnitude = 5, index = 20
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 20 over 5 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 36, magnitude = 6, index = 36
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 36 over 6 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 3 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 4 over 3 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 15 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -19, magnitude = 5, index = 12
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 12 over 5 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #1] Valeurs "niveaux de gris" initiales:
dc 6d ac 1c 0c 27 e6 20    
d4 73 23 de 09 c5 92 f6    
c5 ff c3 0f c2 87 35 fc    
b6 41 76 98 7f c5 9d 9e    
1b c9 bd e8 64 88 a6 e9    
eb 77 d0 f4 e5 ed 8f 70    
0f 45 ea bd 11 37 7c 10    
6b 9d 6a 8a bb 89 7e 3d    

[MCU #1] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	dc 6d ac 1c 0c 27 e6 20 
	d4 73 23 de 09 c5 92 f6 
	c5 ff c3 0f c2 87 35 fc 
	b6 41 76 98 7f c5 9d 9e 
	1b c9 bd e8 64 88 a6 e9 
	eb 77 d0 f4 e5 ed 8f 70 
	0f 45 ea bd 11 37 7c 10 
	6b 9d 6a 8a bb 89 7e 3d 

[MCU #1] Downsampling:
[Y]:
	dc 6d ac 1c 0c 27 e6 20 
	d4 73 23 de 09 c5 92 f6 
	c5 ff c3 0f c2 87 35 fc 
	b6 41 76 98 7f c5 9d 9e 
	1b c9 bd e8 64 88 a6 e9 
	eb 77 d0 f4 e5 ed 8f 70 
	0f 45 ea bd 11 37 7c 10 
	6b 9d 6a 8a bb 89 7e 3d 

[MCU #1] DCT:
[Y]:
	0068 001e 0017 ffd8 ffe4 0048 0027 ffdf 
	000a fffa 00ed 0029 0016 0003 001e fffa 
	ff64 004a 0021 002d ffc8 005c ffc9 0032 
	000a 0018 ffce ffda ffce 00a3 fff5 000e 
	ffcc ffe0 0006 000f ffcf 001e ffb9 002d 
	ff84 0046 fff0 0000 ffb5 0043 0022 0089 
	006f 005a 000e 006a 000b ff76 0011 0087 
	ffc1 001f 0019 ff50 ffa0 ff98 ffd1 0033 

[MCU #1] ZZ:
[Y]:
	0068 001e 000a ff64 fffa 0017 ffd8 00ed 
	004a 000a ffcc 0018 0021 0029 ffe4 0048 
	0016 002d ffce ffe0 ff84 006f 0046 0006 
	ffda ffc8 0003 0027 ffdf 001e 005c ffce 
	000f fff0 005a ffc1 001f 000e 0000 ffcf 
	00a3 ffc9 fffa 0032 fff5 001e ffb5 006a 
	0019 ff50 000b 0043 ffb9 000e 002d 0022 
	ff76 ffa0 ff98 0011 0089 0087 ffd1 0033 

[MCU #1] Quantification:
[Y]:
	0014 000a 0003 ffe1 0000 0001 fffe 000d 
	0012 0002 fff3 0004 0004 0002 ffff 0004 
	0005 000b fff6 fffc fff6 0006 0003 0000 
	fff7 fff5 0000 0004 fffe 0001 0003 fffe 
	0003 fffe 0008 fffd 0001 0000 0000 fffe 
	0017 fffb 0000 0002 0000 0000 fffe 0003 
	0001 fff7 0000 0002 fffe 0000 0001 0001 
	fffa fffd fffd 0000 0004 0004 ffff 0001 

[MCU #1] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 24, magnitude = 5, index = 24
		bitstream => writing 6 over 3 bits
		bitstream => writing 24 over 5 bits

AC:
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -31, magnitude = 5, index = 0
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 0 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = 18, magnitude = 5, index = 18
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 18 over 5 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 6 over 4 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 1 over 2 bits
	value = 23, magnitude = 5, index = 23
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 23 over 5 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 4 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
[MCU #2] Valeurs "niveaux de gris" initiales:
96 ce dd 88 ef ed d1 fc    
65 1b 6f 18 80 55 78 02    
6c 0c e9 70 b8 49 97 42    
ce 0e a0 fc 45 a1 ec 8a    
d4 08 dc ff 20 11 a1 d1    
36 22 7c b0 d1 52 e7 67    
bb 0f 4b 93 8e fd 3c 01    
06 d3 cb 84 37 9e ec 59    

[MCU #2] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	96 ce dd 88 ef ed d1 fc 
	65 1b 6f 18 80 55 78 02 
	6c 0c e9 70 b8 49 97 42 
	ce 0e a0 fc 45 a1 ec 8a 
	d4 08 dc ff 20 11 a1 d1 
	36 22 7c b0 d1 52 e7 67 
	bb 0f 4b 93 8e fd 3c 01 
	06 d3 cb 84 37 9e ec 59 

[MCU #2] Downsampling:
[Y]:
	96 ce dd 88 ef ed d1 fc 
	65 1b 6f 18 80 55 78 02 
	6c 0c e9 70 b8 49 97 42 
	ce 0e a0 fc 45 a1 ec 8a 
	d4 08 dc ff 20 11 a1 d1 
	36 22 7c b0 d1 52 e7 67 
	bb 0f 4b 93 8e fd 3c 01 
	06 d3 cb 84 37 9e ec 59 

[MCU #2] DCT:
[Y]:
	0029 ffbe ff9d fff5 ffeb 00cb 0033 0066 
	0034 fffe 0026 0002 0024 ffc5 0022 0063 
	001f fff8 ffeb 0052 ff54 ff2d ffe1 ffe7 
	005c ffd4 000f 0005 0065 ffda fff9 fff7 
	00cf ffed 0074 ff6c ffdd 0029 fff9 ffa1 
	0077 fff1 ffd5 007f 0025 fff8 0043 ffbf 
	0067 ffb8 ffdc ff8e ffca ffc3 ffa8 0055 
	000e 0045 000f ffd6 0038 fff3 0058 000a 

[MCU #2] ZZ:
[Y]:
	0029 ffbe 0034 001f fffe ff9d fff5 0026 
	fff8 005c 00cf ffd4 ffeb 0002 ffeb 00cb 
	0024 0052 000f ffed 0077 0067 fff1 0074 
	0005 ff54 ffc5 0033 0066 0022 ff2d 0065 
	ff6c ffd5 ffb8 000e 0045 ffdc 007f ffdd 
	ffda ffe1 0063 ffe7 fff9 0029 0025 ff8e 
	000f ffd6 ffca fff8 fff9 fff7 ffa1 0043 
	ffc3 0038 fff3 ffa8 ffbf 0055 0058 000a 

[MCU #2] Quantification:
[Y]:
	0008 ffea 0011 0006 0000 fff8 0000 0002 
	fffe 0017 0033 fff9 fffe 0000 ffff 000b 
	0009 0014 0003 fffe 0009 0006 0000 0006 
	0001 ffde fff8 0005 0006 0001 fff8 0005 
	ffe3 fffa fffa 0000 0003 ffff 0004 ffff 
	fffb fffe 0005 ffff 0000 0001 0001 fffc 
	0001 fffe fffe 0000 0000 0000 fffe 0002 
	fffe 0002 0000 fffd ffff 0002 0002 0000 

[MCU #2] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -12, magnitude = 4, index = 3
		bitstream => writing 5 over 3 bits
		bitstream => writing 3 over 4 bits

AC:
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 7 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 23, magnitude = 5, index = 23
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 23 over 5 bits
	value = 51, magnitude = 6, index = 51
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 51 over 6 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 20, magnitude = 5, index = 20
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 20 over 5 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -34, magnitude = 6, index = 29
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 29 over 6 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -29, magnitude = 5, index = 2
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 2 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #3] Valeurs "niveaux de gris" initiales:
d5 3d fe 22 bf 04 0a 96    
47 00 69 5a 1d 9f 49 c3    
b2 83 5e 12 d4 96 e1 3d    
64 64 05 24 47 8c cc 9b    
c4 07 1f 16 3c 7b 08 6d    
8b a6 a4 ae 39 e8 ae cc    
94 d3 04 9b a0 29 1e 1d    
82 8b f7 77 e6 a5 b6 d4    

[MCU #3] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	d5 3d fe 22 bf 04 0a 96 
	47 00 69 5a 1d 9f 49 c3 
	b2 83 5e 12 d4 96 e1 3d 
	64 64 05 24 47 8c cc 9b 
	c4 07 1f 16 3c 7b 08 6d 
	8b a6 a4 ae 39 e8 ae cc 
	94 d3 04 9b a0 29 1e 1d 
	82 8b f7 77 e6 a5 b6 d4 

[MCU #3] Downsampling:
[Y]:
	d5 3d fe 22 bf 04 0a 96 
	47 00 69 5a 1d 9f 49 c3 
	b2 83 5e 12 d4 96 e1 3d 
	64 64 05 24 47 8c cc 9b 
	c4 07 1f 16 3c 7b 08 6d 
	8b a6 a4 ae 39 e8 ae cc 
	94 d3 04 9b a0 29 1e 1d 
	82 8b f7 77 e6 a5 b6 d4 

[MCU #3] DCT:
[Y]:
	ffb5 ffe6 0059 0042 0026 ffdd 004a 0039 
	ff91 ffea 002d fffe 0015 0015 005a 0061 
	0063 0058 ffa7 ff79 0033 ffc9 002a 0070 
	ffc9 006a 000f ffb9 004a 0003 0061 ffc1 
	ffeb 0000 0027 ffe7 0030 ffeb 004d 006f 
	fff6 0066 fffa 0029 000d ffd5 ff59 0024 
	00d1 fff9 fffd fffd ffad 0009 0010 006d 
	ffa5 0094 ffe4 0068 0053 ffd6 ffe9 005a 

[MCU #3] ZZ:
[Y]:
	ffb5 ffe6 ff91 0063 ffea 0059 0042 002d 
	0058 ffc9 ffeb 006a ffa7 fffe 0026 ffdd 
	0015 ff79 000f 0000 fff6 00d1 0066 0027 
	ffb9 0033 0015 004a 0039 005a ffc9 004a 
	ffe7 fffa fff9 ffa5 0094 fffd 0029 0030 
	0003 002a 0061 0070 0061 ffeb 000d fffd 
	ffe4 0068 ffad ffd5 004d ffc1 006f ff59 
	0009 0053 ffd6 0010 0024 006d ffe9 005a 

[MCU #3] Quantification:
[Y]:
	fff1 fff8 ffdb 0013 fffd 0007 0004 0002 
	0016 fff3 fffb 0011 fff5 0000 0002 fffe 
	0005 ffdf 0003 0000 0000 000c 0004 0002 
	ffef 000a 0003 0008 0003 0003 fffe 0003 
	fffb 0000 0000 fffb 0007 0000 0001 0002 
	0000 0003 0005 0005 0004 0000 0000 0000 
	ffff 0005 fffd ffff 0002 ffff 0003 fffb 
	0000 0002 ffff 0000 0001 0003 0000 0003 

[MCU #3] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -23, magnitude = 5, index = 8
		bitstream => writing 6 over 3 bits
		bitstream => writing 8 over 5 bits

AC:
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = -37, magnitude = 6, index = 26
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 26 over 6 bits
	value = 19, magnitude = 5, index = 19
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 19 over 5 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 22, magnitude = 5, index = 22
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 22 over 5 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -33, magnitude = 6, index = 30
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 30 over 6 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 36, huffman path = 4084, nb_bits = 12
		bitstream => writing 4084 over 12 bits
		bitstream => writing 12 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 2 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 49, huffman path = 58, nb_bits = 6
		bitstream => writing 58 over 6 bits
		bitstream => writing 0 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
[MCU #4] Valeurs "niveaux de gris" initiales:
a2 b4 ed a0 89 78 b3 65    
c4 26 39 e5 d7 ed 04 ab    
4f 05 1f 09 71 01 2d 36    
cb be 85 4c 62 f3 2b 18    
1d 9b 8b 49 93 0c 7a ae    
4d be ff 83 93 3a d8 7f    
1f f4 82 7c 55 8e 7e 64    
e1 f3 fe 1e c3 fc 60 2f    

[MCU #4] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	a2 b4 ed a0 89 78 b3 65 
	c4 26 39 e5 d7 ed 04 ab 
	4f 05 1f 09 71 01 2d 36 
	cb be 85 4c 62 f3 2b 18 
	1d 9b 8b 49 93 0c 7a ae 
	4d be ff 83 93 3a d8 7f 
	1f f4 82 7c 55 8e 7e 64 
	e1 f3 fe 1e c3 fc 60 2f 

[MCU #4] Downsampling:
[Y]:
	a2 b4 ed a0 89 78 b3 65 
	c4 26 39 e5 d7 ed 04 ab 
	4f 05 1f 09 71 01 2d 36 
	cb be 85 4c 62 f3 2b 18 
	1d 9b 8b 49 93 0c 7a ae 
	4d be ff 83 93 3a d8 7f 
	1f f4 82 7c 55 8e 7e 64 
	e1 f3 fe 1e c3 fc 60 2f 

[MCU #4] DCT:
[Y]:
	fffb 0066 ffd6 0010 ffb4 ffa6 0019 002c 
	ffbe ffd7 ffe7 002f 00b4 004c 0030 ffde 
	00a3 002f ffdd 0030 ffe1 000d 0031 ffee 
	0076 ffcb fffe ff35 ffcf 0034 ff8b 0025 
	0065 0062 0022 0029 ff99 ffe2 0028 0020 
	ffd7 0039 0019 0000 ff7d 001a ffd5 ffd4 
	ffd3 001d 0023 ffcf ffc6 0031 ffdc 00a6 
	ff53 ffb3 0025 ff98 0019 ffe7 ff9c 003c 

[MCU #4] ZZ:
[Y]:
	fffb 0066 ffbe 00a3 ffd7 ffd6 0010 ffe7 
	002f 0076 0065 ffcb ffdd 002f ffb4 ffa6 
	00b4 0030 fffe 0062 ffd7 ffd3 0039 0022 
	ff35 ffe1 004c 0019 002c 0030 000d ffcf 
	0029 0019 001d ff53 ffb3 0023 0000 ff99 
	0034 0031 ffde ffee ff8b ffe2 ff7d ffcf 
	0025 ff98 ffc6 001a 0028 0025 0020 ffd5 
	0031 0019 ffe7 ffdc ffd4 00a6 ff9c 003c 

[MCU #4] Quantification:
[Y]:
	ffff 0022 ffea 0020 fffb fffd 0001 ffff 
	000b 001d 0019 fff8 fffc 0002 fffc fffb 
	002d 000c 0000 000e fffd fffe 0002 0002 
	ffce fffa 000a 0002 0002 0001 0000 fffe 
	0008 0003 0002 fff6 fffd 0001 0000 fffc 
	0007 0004 fffe 0000 fffc 0000 fffd ffff 
	0002 fffb fffe 0001 0001 0001 0000 ffff 
	0002 0000 0000 ffff ffff 0005 fffd 0002 

[MCU #4] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 14, magnitude = 4, index = 14
		bitstream => writing 5 over 3 bits
		bitstream => writing 14 over 4 bits

AC:
	value = 34, magnitude = 6, index = 34
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 34 over 6 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = 32, magnitude = 6, index = 32
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 32 over 6 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 29, magnitude = 5, index = 29
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 29 over 5 bits
	value = 25, magnitude = 5, index = 25
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 25 over 5 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 45, magnitude = 6, index = 45
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 45 over 6 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 14 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -50, magnitude = 6, index = 13
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 13 over 6 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
[MCU #5] Valeurs "niveaux de gris" initiales:
e6 60 81 f2 87 67 12 1d    
60 27 8a 69 ec 1c 60 51    
01 f0 45 c3 77 7a bf e3    
34 a1 b0 b3 66 4e 52 35    
d5 37 96 39 bf 3c 23 93    
b2 a9 73 97 96 02 07 cd    
d3 68 22 e4 9f 9e f4 5a    
99 ca b9 54 54 37 92 5a    

[MCU #5] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	e6 60 81 f2 87 67 12 1d 
	60 27 8a 69 ec 1c 60 51 
	01 f0 45 c3 77 7a bf e3 
	34 a1 b0 b3 66 4e 52 35 
	d5 37 96 39 bf 3c 23 93 
	b2 a9 73 97 96 02 07 cd 
	d3 68 22 e4 9f 9e f4 5a 
	99 ca b9 54 54 37 92 5a 

[MCU #5] Downsampling:
[Y]:
	e6 60 81 f2 87 67 12 1d 
	60 27 8a 69 ec 1c 60 51 
	01 f0 45 c3 77 7a bf e3 
	34 a1 b0 b3 66 4e 52 35 
	d5 37 96 39 bf 3c 23 93 
	b2 a9 73 97 96 02 07 cd 
	d3 68 22 e4 9f 9e f4 5a 
	99 ca b9 54 54 37 92 5a 

[MCU #5] DCT:
[Y]:
	ffe3 0071 ffd9 ffcd 007b 0001 ffba 001d 
	ffd3 fff7 ff8b ffeb 001e fff1 0014 fff2 
	0018 0034 fff4 004b fff6 005e ffef fffe 
	ffee 006b 0004 004a 00bd 0013 006b 001b 
	ffcc 008b fff2 0002 ffd3 0015 0066 001f 
	0048 fff7 ffcc 0022 ffd5 0063 ffb9 ff5c 
	001c 001c 004a ff8a fff2 ffa4 ffe7 ff99 
	0047 ffab 002c 0050 000c 001c fff7 ffe0 

[MCU #5] ZZ:
[Y]:
	ffe3 0071 ffd3 0018 fff7 ffd9 ffcd ff8b 
	0034 ffee ffcc 006b fff4 ffeb 007b 0001 
	001e 004b 0004 008b 0048 001c fff7 fff2 
	004a fff6 fff1 ffba 001d 0014 005e 00bd 
	0002 ffcc 001c 0047 ffab 004a 0022 ffd3 
	0013 ffef fff2 fffe 006b 0015 ffd5 ff8a 
	002c 0050 fff2 0063 0066 001b 001f ffb9 
	ffa4 000c 001c ffe7 ff5c ff99 fff7 ffe0 

[MCU #5] Quantification:
[Y]:
	fffb 0025 fff1 0004 ffff fffd fffd fffa 
	000d fffc fff3 0011 ffff ffff 0006 0000 
	0007 0012 0000 0013 0006 0001 0000 0000 
	0012 fffe fffe fff9 0001 0000 0003 0009 
	0000 fff9 0002 0004 fffc 0002 0001 ffff 
	0002 ffff 0000 0000 0004 0000 ffff fffc 
	0002 0004 0000 0003 0003 0000 0000 fffe 
	fffc 0000 0000 0000 fffc fffd 0000 ffff 

[MCU #5] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -4, magnitude = 3, index = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits

AC:
	value = 37, magnitude = 6, index = 37
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 37 over 6 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 7 over 3 bits
	value = 18, magnitude = 5, index = 18
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 18 over 5 bits
	value = 19, magnitude = 5, index = 19
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 19 over 5 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 18, magnitude = 5, index = 18
	RLE code = 37, huffman path = 65417, nb_bits = 16
		bitstream => writing 65417 over 16 bits
		bitstream => writing 18 over 5 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 0 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 1 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 51, huffman path = 4085, nb_bits = 12
		bitstream => writing 4085 over 12 bits
		bitstream => writing 3 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
[MCU #6] Valeurs "niveaux de gris" initiales:
35 ef ef ef ef ef ef ef    
38 cf cf cf cf cf cf cf    
87 a8 a8 a8 a8 a8 a8 a8    
5c f2 f2 f2 f2 f2 f2 f2    
44 ff ff ff ff ff ff ff    
25 83 83 83 83 83 83 83    
ad 3f 3f 3f 3f 3f 3f 3f    
0a 5d 5d 5d 5d 5d 5d 5d    

[MCU #6] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	35 ef ef ef ef ef ef ef 
	38 cf cf cf cf cf cf cf 
	87 a8 a8 a8 a8 a8 a8 a8 
	5c f2 f2 f2 f2 f2 f2 f2 
	44 ff ff ff ff ff ff ff 
	25 83 83 83 83 83 83 83 
	ad 3f 3f 3f 3f 3f 3f 3f 
	0a 5d 5d 5d 5d 5d 5d 5d 

[MCU #6] Downsampling:
[Y]:
	35 ef ef ef ef ef ef ef 
	38 cf cf cf cf cf cf cf 
	87 a8 a8 a8 a8 a8 a8 a8 
	5c f2 f2 f2 f2 f2 f2 f2 
	44 ff ff ff ff ff ff ff 
	25 83 83 83 83 83 83 83 
	ad 3f 3f 3f 3f 3f 3f 3f 
	0a 5d 5d 5d 5d 5d 5d 5d 

[MCU #6] DCT:
[Y]:
	0115 ff7a ff82 ff8f ffa0 ffb4 ffcc ffe6 
	015c ffbd ffc1 ffc7 ffd0 ffda ffe6 fff3 
	ff2a 0017 0016 0013 0010 000d 0009 0004 
	0046 ffe4 ffe6 ffe9 ffec fff1 fff5 fffb 
	00cd ffb5 ffb9 ffc0 ffca ffd5 ffe3 fff1 
	ffd1 003b 0037 0032 002a 0021 0017 000b 
	ffc4 fff3 fff4 fff5 fff7 fff9 fffb fffe 
	000d 0022 0020 001c 0018 0013 000d 0006 

[MCU #6] ZZ:
[Y]:
	0115 ff7a 015c ff2a ffbd ff82 ff8f ffc1 
	0017 0046 00cd ffe4 0016 ffc7 ffa0 ffb4 
	ffd0 0013 ffe6 ffb5 ffd1 ffc4 003b ffb9 
	ffe9 0010 ffda ffcc ffe6 ffe6 000d ffec 
	ffc0 0037 fff3 000d 0022 fff4 0032 ffca 
	fff1 0009 fff3 0004 fff5 ffd5 002a fff5 
	0020 001c fff7 0021 ffe3 fffb fff1 0017 
	fff9 0018 0013 fffb 000b fffe 000d 0006 

[MCU #6] Quantification:
[Y]:
	0037 ffd4 0074 ffd6 fff7 fff6 fff9 fffd 
	0005 0011 0033 fffc 0002 fffd fffb fffc 
	fff4 0004 fffb fff6 fffd fffd 0002 fffc 
	fffb 0003 fffb fffb ffff ffff 0000 ffff 
	fff4 0007 ffff 0000 0001 0000 0001 fffe 
	fffe 0000 0000 0000 0000 ffff 0001 0000 
	0002 0001 0000 0001 0000 0000 0000 0000 
	0000 0000 0000 0000 0000 0000 0000 0000 

[MCU #6] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 60, magnitude = 6, index = 60
		bitstream => writing 14 over 4 bits
		bitstream => writing 60 over 6 bits

AC:
	value = -44, magnitude = 6, index = 19
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 19 over 6 bits
	value = 116, magnitude = 7, index = 116
	RLE code = 7, huffman path = 248, nb_bits = 8
		bitstream => writing 248 over 8 bits
		bitstream => writing 116 over 7 bits
	value = -42, magnitude = 6, index = 21
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 21 over 6 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = 51, magnitude = 6, index = 51
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 51 over 6 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 65, huffman path = 59, nb_bits = 6
		bitstream => writing 59 over 6 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #7] Valeurs "niveaux de gris" initiales:
de 41 fc ca 9b 7e 55 92    
18 96 13 7a e1 0b 2f 62    
88 d6 57 d8 f3 e9 72 b3    
3d d8 37 7a d7 e9 fe cf    
cf c3 70 34 a2 48 17 aa    
7d 1c 08 96 6f 1b 38 b4    
4f 96 4c 43 36 34 75 09    
c1 c8 c6 77 a5 6c bf 3c    

[MCU #7] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	de 41 fc ca 9b 7e 55 92 
	18 96 13 7a e1 0b 2f 62 
	88 d6 57 d8 f3 e9 72 b3 
	3d d8 37 7a d7 e9 fe cf 
	cf c3 70 34 a2 48 17 aa 
	7d 1c 08 96 6f 1b 38 b4 
	4f 96 4c 43 36 34 75 09 
	c1 c8 c6 77 a5 6c bf 3c 

[MCU #7] Downsampling:
[Y]:
	de 41 fc ca 9b 7e 55 92 
	18 96 13 7a e1 0b 2f 62 
	88 d6 57 d8 f3 e9 72 b3 
	3d d8 37 7a d7 e9 fe cf 
	cf c3 70 34 a2 48 17 aa 
	7d 1c 08 96 6f 1b 38 b4 
	4f 96 4c 43 36 34 75 09 
	c1 c8 c6 77 a5 6c bf 3c 

[MCU #7] DCT:
[Y]:
	0007 0021 fff0 0019 0057 ff9c ffa6 0007 
	0065 ffcc ffa8 ffef 0051 ffc9 0026 ffe5 
	ffdf 0079 ffc4 ffd3 ffde 007b 0026 004e 
	ff5c 0035 003b ffb8 007e 0043 006b 001d 
	00b3 0026 0032 0008 ffbb 0017 004c 0043 
	0041 ffb6 fff4 0015 ff9c 004e 0012 ffd3 
	008c fff3 fff5 0000 0054 0042 005e ffde 
	0023 0088 0012 0008 ffef ffeb 004c ffff 

[MCU #7] ZZ:
[Y]:
	0007 0021 0065 ffdf ffcc fff0 0019 ffa8 
	0079 ff5c 00b3 0035 ffc4 ffef 0057 ff9c 
	0051 ffd3 003b 0026 0041 008c ffb6 0032 
	ffb8 ffde ffc9 ffa6 0007 0026 007b 007e 
	0008 fff4 fff3 0023 0088 fff5 0015 ffbb 
	0043 0026 ffe5 004e 006b 0017 ff9c 0000 
	0012 0008 0054 004e 004c 001d 0043 0012 
	0042 ffef ffeb 005e ffd3 ffde 004c ffff 

[MCU #7] Quantification:
[Y]:
	0001 000b 0021 fffa fff9 ffff 0001 fffc 
	001e ffd7 002c 0008 fff9 ffff 0004 fffb 
	0014 fff5 000b 0005 0005 0008 fffd 0002 
	ffee fffa fff9 fff6 0000 0001 0005 0006 
	0001 ffff ffff 0002 0006 0000 0000 fffd 
	0009 0003 ffff 0004 0004 0000 fffe 0000 
	0001 0000 0003 0003 0002 0000 0001 0000 
	0003 0000 0000 0003 ffff ffff 0002 0000 

[MCU #7] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -54, magnitude = 6, index = 9
		bitstream => writing 14 over 4 bits
		bitstream => writing 9 over 6 bits

AC:
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 33, magnitude = 6, index = 33
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 33 over 6 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 30, magnitude = 5, index = 30
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 30 over 5 bits
	value = -41, magnitude = 6, index = 22
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 22 over 6 bits
	value = 44, magnitude = 6, index = 44
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 44 over 6 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 20, magnitude = 5, index = 20
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 20 over 5 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 0 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #8] Valeurs "niveaux de gris" initiales:
f5 3b 37 ac 0f 18 9f 0e    
95 3f ee 7d 2c bb 60 e4    
e0 8d 78 48 c1 d4 c3 6f    
c9 ee 83 c6 66 0d 1b b6    
a1 87 25 c8 35 78 25 5d    
5f ef 45 4b 75 99 a7 2f    
09 87 7c 4d 16 0b 9a 3b    
04 28 d7 8d e0 09 63 db    

[MCU #8] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	f5 3b 37 ac 0f 18 9f 0e 
	95 3f ee 7d 2c bb 60 e4 
	e0 8d 78 48 c1 d4 c3 6f 
	c9 ee 83 c6 66 0d 1b b6 
	a1 87 25 c8 35 78 25 5d 
	5f ef 45 4b 75 99 a7 2f 
	09 87 7c 4d 16 0b 9a 3b 
	04 28 d7 8d e0 09 63 db 

[MCU #8] Downsampling:
[Y]:
	f5 3b 37 ac 0f 18 9f 0e 
	95 3f ee 7d 2c bb 60 e4 
	e0 8d 78 48 c1 d4 c3 6f 
	c9 ee 83 c6 66 0d 1b b6 
	a1 87 25 c8 35 78 25 5d 
	5f ef 45 4b 75 99 a7 2f 
	09 87 7c 4d 16 0b 9a 3b 
	04 28 d7 8d e0 09 63 db 

[MCU #8] DCT:
[Y]:
	ffb3 004b 0034 ffc7 0015 002c ffe3 ffee 
	0052 0046 005d 0072 002c 0076 005f ffcb 
	ffb8 ffa0 ffdb ffaa fff8 005e 0024 0083 
	ff81 0047 001d 0055 ffbd 005a ffa4 ff92 
	ffd7 004f ffea ffb2 00b9 0023 ffe2 ffdf 
	ffbf 005d 0032 000a ffe9 0024 ff76 0012 
	0043 fff2 ffe9 00a1 fff0 ffec ffb4 003d 
	ffc5 ffeb fff2 0064 fff9 004a fff4 fffa 

[MCU #8] ZZ:
[Y]:
	ffb3 004b 0052 ffb8 0046 0034 ffc7 005d 
	ffa0 ff81 ffd7 0047 ffdb 0072 0015 002c 
	002c ffaa 001d 004f ffbf 0043 005d ffea 
	0055 fff8 0076 ffe3 ffee 005f 005e ffbd 
	ffb2 0032 fff2 ffc5 ffeb ffe9 000a 00b9 
	005a 0024 ffcb 0083 ffa4 0023 ffe9 00a1 
	fff2 0064 fff0 0024 ffe2 ff92 ffdf ff76 
	ffec fff9 004a ffb4 0012 003d fff4 fffa 

[MCU #8] Quantification:
[Y]:
	fff1 0019 001b fff2 000a 0004 fffd 0005 
	ffe8 ffe1 fff6 000b fffc 0006 0001 0002 
	000b ffeb 0005 000b fffb 0003 0004 ffff 
	0015 ffff 0010 fffd ffff 0003 0003 fffd 
	fff1 0007 ffff fffd ffff 0000 0000 0008 
	000c 0003 fffd 0006 fffd 0001 0000 0005 
	0000 0005 0000 0001 0000 fffd 0000 fffc 
	0000 0000 0002 fffe 0000 0002 0000 0000 

[MCU #8] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -16, magnitude = 5, index = 15
		bitstream => writing 6 over 3 bits
		bitstream => writing 15 over 5 bits

AC:
	value = 25, magnitude = 5, index = 25
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 25 over 5 bits
	value = 27, magnitude = 5, index = 27
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 27 over 5 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -24, magnitude = 5, index = 7
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 7 over 5 bits
	value = -31, magnitude = 5, index = 0
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 0 over 5 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -21, magnitude = 5, index = 10
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 10 over 5 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 21, magnitude = 5, index = 21
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 21 over 5 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 36, huffman path = 4084, nb_bits = 12
		bitstream => writing 4084 over 12 bits
		bitstream => writing 8 over 4 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 5 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 5 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #9] Valeurs "niveaux de gris" initiales:
37 62 0a 97 91 a3 61 4a    
23 c2 f1 1d 1a 39 4f 1d    
10 49 4d af 65 69 3c fe    
8a 59 78 bb 78 c7 65 de    
a3 6c 84 9c 7c 98 19 53    
8f 4b 01 2f 91 5a f4 9f    
0a 03 98 be ca e5 b6 dd    
71 6d 4c e2 80 43 cf e0    

[MCU #9] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	37 62 0a 97 91 a3 61 4a 
	23 c2 f1 1d 1a 39 4f 1d 
	10 49 4d af 65 69 3c fe 
	8a 59 78 bb 78 c7 65 de 
	a3 6c 84 9c 7c 98 19 53 
	8f 4b 01 2f 91 5a f4 9f 
	0a 03 98 be ca e5 b6 dd 
	71 6d 4c e2 80 43 cf e0 

[MCU #9] Downsampling:
[Y]:
	37 62 0a 97 91 a3 61 4a 
	23 c2 f1 1d 1a 39 4f 1d 
	10 49 4d af 65 69 3c fe 
	8a 59 78 bb 78 c7 65 de 
	a3 6c 84 9c 7c 98 19 53 
	8f 4b 01 2f 91 5a f4 9f 
	0a 03 98 be ca e5 b6 dd 
	71 6d 4c e2 80 43 cf e0 

[MCU #9] DCT:
[Y]:
	ffc4 ff63 ffd5 ffcd 003b 0000 0006 ffc2 
	ff7d 0080 ffe5 ffed ffa7 ffb2 001e ffd6 
	ffeb ffd6 ffda ffe6 ffd4 0014 ffa3 0012 
	ffce 0014 fff5 00a5 ffda 0006 ffe0 0034 
	0034 0046 ffea 003a 004f 0018 0000 ffad 
	0054 ff3e ffb7 0024 0053 0001 002f ffc7 
	ffe2 ffab 0059 002c 0075 000a ff90 ffe5 
	fff6 fff1 ff96 ffe7 0039 ffe4 0039 ffca 

[MCU #9] ZZ:
[Y]:
	ffc4 ff63 ff7d ffeb 0080 ffd5 ffcd ffe5 
	ffd6 ffce 0034 0014 ffda ffed 003b 0000 
	ffa7 ffe6 fff5 0046 0054 ffe2 ff3e ffea 
	00a5 ffd4 ffb2 0006 ffc2 001e 0014 ffda 
	003a ffb7 ffab fff6 fff1 0059 0024 004f 
	0006 ffa3 ffd6 0012 ffe0 0018 0053 002c 
	ff96 ffe7 0075 0001 0000 0034 ffad 002f 
	000a 0039 ffe4 ff90 ffc7 ffe5 0039 ffca 

[MCU #9] Quantification:
[Y]:
	fff4 ffcc ffd5 fffc 0012 fffd fffd ffff 
	fff6 fff4 000d 0003 fffc ffff 0003 0000 
	ffea fffa fffe 000a 0007 ffff fff7 ffff 
	0029 fff8 fff5 0000 fffc 0001 0000 fffe 
	000b fff6 fff9 0000 0000 0002 0001 0003 
	0000 fff8 fffe 0000 ffff 0000 0002 0001 
	fff9 ffff 0005 0000 0000 0001 fffe 0001 
	0000 0002 0000 fffd ffff 0000 0001 ffff 

[MCU #9] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 3, magnitude = 2, index = 3
		bitstream => writing 3 over 3 bits
		bitstream => writing 3 over 2 bits

AC:
	value = -52, magnitude = 6, index = 11
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 11 over 6 bits
	value = -43, magnitude = 6, index = 20
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 20 over 6 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 18, magnitude = 5, index = 18
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 18 over 5 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 9 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 41, magnitude = 6, index = 41
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 41 over 6 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 7 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
[MCU #10] Valeurs "niveaux de gris" initiales:
f8 b5 81 8a 0f 8b e7 ed    
91 9a c0 f7 1b c5 67 34    
b2 84 f8 df ef b4 fd 78    
d8 e2 08 59 70 7b 26 ae    
13 a2 45 43 b6 90 ec 86    
e8 31 d3 d4 12 73 44 8f    
a6 48 96 97 68 9b 89 b8    
51 c8 db 99 cb d9 7a 8c    

[MCU #10] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	f8 b5 81 8a 0f 8b e7 ed 
	91 9a c0 f7 1b c5 67 34 
	b2 84 f8 df ef b4 fd 78 
	d8 e2 08 59 70 7b 26 ae 
	13 a2 45 43 b6 90 ec 86 
	e8 31 d3 d4 12 73 44 8f 
	a6 48 96 97 68 9b 89 b8 
	51 c8 db 99 cb d9 7a 8c 

[MCU #10] Downsampling:
[Y]:
	f8 b5 81 8a 0f 8b e7 ed 
	91 9a c0 f7 1b c5 67 34 
	b2 84 f8 df ef b4 fd 78 
	d8 e2 08 59 70 7b 26 ae 
	13 a2 45 43 b6 90 ec 86 
	e8 31 d3 d4 12 73 44 8f 
	a6 48 96 97 68 9b 89 b8 
	51 c8 db 99 cb d9 7a 8c 

[MCU #10] DCT:
[Y]:
	00a4 0018 0026 fff2 ffe6 0042 0029 ffbd 
	002f 0029 004b 0010 ffea 004b ffcd ffd2 
	0050 0011 0000 ffc8 ffd1 003b 0045 ffe2 
	ffa6 ffea 008b ffd6 001b 0061 0021 ffdf 
	ffe7 ffbc 0067 0032 ffe0 ff54 ff8d fffc 
	000c 0007 009b 001b 006f fffb 0013 0000 
	006b 0013 fff5 ffdf 0011 003a 001f 0048 
	0051 ff61 ffc9 000f ffba 0006 ffa3 0083 

[MCU #10] ZZ:
[Y]:
	00a4 0018 002f 0050 0029 0026 fff2 004b 
	0011 ffa6 ffe7 ffea 0000 0010 ffe6 0042 
	ffea ffc8 008b ffbc 000c 006b 0007 0067 
	ffd6 ffd1 004b 0029 ffbd ffcd 003b 001b 
	0032 009b 0013 0051 ff61 fff5 001b ffe0 
	0061 0045 ffd2 ffe2 0021 ff54 006f ffdf 
	ffc9 000f 0011 fffb ff8d ffdf fffc 0013 
	003a ffba 0006 001f 0000 0048 ffa3 0083 

[MCU #10] Quantification:
[Y]:
	0020 0008 000f 0010 0005 0003 0000 0004 
	0004 ffea fffa fffd 0000 0000 ffff 0003 
	fffb fff2 001b fff7 0001 0006 0000 0006 
	fff6 fff7 000a 0004 fffc ffff 0002 0001 
	000a 0016 0001 0004 fff9 0000 0000 ffff 
	000d 0006 fffe ffff 0001 fffb 0003 ffff 
	fffd 0000 0000 0000 fffd 0000 0000 0000 
	0002 fffe 0000 0001 0000 0002 fffd 0004 

[MCU #10] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 44, magnitude = 6, index = 44
		bitstream => writing 14 over 4 bits
		bitstream => writing 44 over 6 bits

AC:
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 4 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = 27, magnitude = 5, index = 27
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 27 over 5 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 6 over 3 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 22, magnitude = 5, index = 22
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 22 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
[MCU #11] Valeurs "niveaux de gris" initiales:
cd e3 b7 68 62 0d fa 57    
5b 7b ae 3c 86 dd 9f 1c    
8a 55 50 7d 3e c2 31 1e    
53 5d 28 2a 47 26 f9 10    
54 5c ba f6 a4 d1 a0 46    
8f 4d 25 ff 68 5d b3 c7    
32 d5 fb 68 0a 70 71 13    
a2 40 03 47 ad c3 83 b1    

[MCU #11] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	cd e3 b7 68 62 0d fa 57 
	5b 7b ae 3c 86 dd 9f 1c 
	8a 55 50 7d 3e c2 31 1e 
	53 5d 28 2a 47 26 f9 10 
	54 5c ba f6 a4 d1 a0 46 
	8f 4d 25 ff 68 5d b3 c7 
	32 d5 fb 68 0a 70 71 13 
	a2 40 03 47 ad c3 83 b1 

[MCU #11] Downsampling:
[Y]:
	cd e3 b7 68 62 0d fa 57 
	5b 7b ae 3c 86 dd 9f 1c 
	8a 55 50 7d 3e c2 31 1e 
	53 5d 28 2a 47 26 f9 10 
	54 5c ba f6 a4 d1 a0 46 
	8f 4d 25 ff 68 5d b3 c7 
	32 d5 fb 68 0a 70 71 13 
	a2 40 03 47 ad c3 83 b1 

[MCU #11] DCT:
[Y]:
	ffc3 0005 ffe9 003d ff91 006f ffca fff8 
	ffff 0050 0011 001a ffad 0019 ffe0 004b 
	0031 0030 0062 0004 ffe5 ffb4 000f 0032 
	0089 0028 fffe ff6d 0010 0044 ffb2 000b 
	0022 ffd3 0031 0025 0029 0012 ffa9 0055 
	ff9f 0070 0066 ffa3 ffa5 0020 ff9e 002b 
	0012 ffcf 004b 0027 00cd 001a ffee ffb8 
	002f 0067 ff9b ffd8 ffc5 ffec 0063 ffce 

[MCU #11] ZZ:
[Y]:
	ffc3 0005 ffff 0031 0050 ffe9 003d 0011 
	0030 0089 0022 0028 0062 001a ff91 006f 
	ffad 0004 fffe ffd3 ff9f 0012 0070 0031 
	ff6d ffe5 0019 ffca fff8 ffe0 ffb4 0010 
	0025 0066 ffcf 002f 0067 004b ffa3 0029 
	0044 000f 004b 0032 ffb2 0012 ffa5 0027 
	ff9b ffd8 00cd 0020 ffa9 000b 0055 ff9e 
	001a ffc5 ffec ffee 002b ffb8 0063 ffce 

[MCU #11] Quantification:
[Y]:
	fff4 0001 0000 0009 000b ffff 0004 0000 
	000c 0022 0008 0006 000c 0001 fffa 0006 
	ffec 0001 0000 fffa fff8 0001 0005 0002 
	ffdc fffb 0003 fffa 0000 ffff fffd 0000 
	0007 000e fffc 0002 0005 0002 fffd 0001 
	0009 0001 0004 0002 fffd 0000 fffe 0001 
	fffa fffe 0008 0001 fffe 0000 0002 fffd 
	0001 fffe 0000 0000 0001 fffe 0003 ffff 

[MCU #11] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -44, magnitude = 6, index = 19
		bitstream => writing 14 over 4 bits
		bitstream => writing 19 over 6 bits

AC:
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 9 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 12 over 4 bits
	value = 34, magnitude = 6, index = 34
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 34 over 6 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -20, magnitude = 5, index = 11
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 11 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 1 over 3 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -36, magnitude = 6, index = 27
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 27 over 6 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 7 over 3 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
[MCU #12] Valeurs "niveaux de gris" initiales:
48 32 03 58 4a a2 66 81    
1c 8d 99 49 48 f9 2d 6b    
4f a9 66 11 7d 29 80 8e    
14 7c d6 7a 89 f2 30 14    
59 c5 0e 8e 3d 33 ec e0    
4c f8 12 c1 91 b9 f1 20    
f7 ed 60 0d f8 fb 48 03    
eb 5b 3e cb 64 a1 a6 d6    

[MCU #12] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	48 32 03 58 4a a2 66 81 
	1c 8d 99 49 48 f9 2d 6b 
	4f a9 66 11 7d 29 80 8e 
	14 7c d6 7a 89 f2 30 14 
	59 c5 0e 8e 3d 33 ec e0 
	4c f8 12 c1 91 b9 f1 20 
	f7 ed 60 0d f8 fb 48 03 
	eb 5b 3e cb 64 a1 a6 d6 

[MCU #12] Downsampling:
[Y]:
	48 32 03 58 4a a2 66 81 
	1c 8d 99 49 48 f9 2d 6b 
	4f a9 66 11 7d 29 80 8e 
	14 7c d6 7a 89 f2 30 14 
	59 c5 0e 8e 3d 33 ec e0 
	4c f8 12 c1 91 b9 f1 20 
	f7 ed 60 0d f8 fb 48 03 
	eb 5b 3e cb 64 a1 a6 d6 

[MCU #12] DCT:
[Y]:
	ffd3 ffd6 0004 0075 ffa0 ffb0 ffca ff99 
	ff51 ffb6 ffdc ff94 ffc6 ffd1 005b 0004 
	0001 fff8 002b 0061 005d 0018 0069 ffe6 
	fffc ffd6 ffff 0044 ffea 0017 ff7c ffb9 
	fff1 ffa3 0023 ffab 0061 006d 001e ffcf 
	ffe6 0066 ff99 0082 ffd9 ffb3 0046 0050 
	ffef ffbb 0039 ffca 003f 0055 ff71 fffe 
	ffe9 fff4 00bc ffef 005d ffe3 ffa7 004c 

[MCU #12] ZZ:
[Y]:
	ffd3 ffd6 ff51 0001 ffb6 0004 0075 ffdc 
	fff8 fffc fff1 ffd6 002b ff94 ffa0 ffb0 
	ffc6 0061 ffff ffa3 ffe6 ffef 0066 0023 
	0044 005d ffd1 ffca ff99 005b 0018 ffea 
	ffab ff99 ffbb ffe9 fff4 0039 0082 0061 
	0017 0069 0004 ffe6 ff7c 006d ffd9 ffca 
	00bc ffef 003f ffb3 001e ffb9 ffcf 0046 
	0055 005d ffe3 ff71 0050 fffe ffa7 004c 

[MCU #12] Quantification:
[Y]:
	fff7 fff2 ffc6 0000 fff6 0000 0007 fffe 
	fffe ffff fffd fff9 0005 fffa fffb fffc 
	fff2 0018 0000 fff3 fffe ffff 0004 0002 
	0011 0012 fffa fffa fffa 0003 0001 ffff 
	ffef fff2 fffa ffff 0000 0001 0004 0004 
	0003 0009 0000 ffff fffb 0003 ffff ffff 
	000c 0000 0002 fffe 0000 ffff ffff 0002 
	0003 0003 ffff fffc 0002 0000 fffe 0002 

[MCU #12] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 3, magnitude = 2, index = 3
		bitstream => writing 3 over 3 bits
		bitstream => writing 3 over 2 bits

AC:
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -58, magnitude = 6, index = 5
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 5 over 6 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 5 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 7 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = 24, magnitude = 5, index = 24
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 24 over 5 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 2 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = 18, magnitude = 5, index = 18
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 18 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
[MCU #13] Valeurs "niveaux de gris" initiales:
05 70 70 70 70 70 70 70    
bc 1e 1e 1e 1e 1e 1e 1e    
73 cd cd cd cd cd cd cd    
4b a8 a8 a8 a8 a8 a8 a8    
a0 70 70 70 70 70 70 70    
05 f2 f2 f2 f2 f2 f2 f2    
fe e1 e1 e1 e1 e1 e1 e1    
0e f2 f2 f2 f2 f2 f2 f2    

[MCU #13] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	05 70 70 70 70 70 70 70 
	bc 1e 1e 1e 1e 1e 1e 1e 
	73 cd cd cd cd cd cd cd 
	4b a8 a8 a8 a8 a8 a8 a8 
	a0 70 70 70 70 70 70 70 
	05 f2 f2 f2 f2 f2 f2 f2 
	fe e1 e1 e1 e1 e1 e1 e1 
	0e f2 f2 f2 f2 f2 f2 f2 

[MCU #13] Downsampling:
[Y]:
	05 70 70 70 70 70 70 70 
	bc 1e 1e 1e 1e 1e 1e 1e 
	73 cd cd cd cd cd cd cd 
	4b a8 a8 a8 a8 a8 a8 a8 
	a0 70 70 70 70 70 70 70 
	05 f2 f2 f2 f2 f2 f2 f2 
	fe e1 e1 e1 e1 e1 e1 e1 
	0e f2 f2 f2 f2 f2 f2 f2 

[MCU #13] DCT:
[Y]:
	00f7 ffa6 ffac ffb4 ffbf ffcd ffdd ffef 
	fe8b 0044 0040 003a 0031 0026 001a 000d 
	ffed ffef fff0 fff2 fff4 fff7 fffa fffd 
	ffa6 0002 0002 0001 0001 0001 0000 0000 
	ff9e ffd7 ffd9 ffdd ffe2 ffe9 fff0 fff8 
	00c5 ffdc ffde ffe2 ffe6 ffec fff2 fff9 
	00bb ff71 ff79 ff87 ff99 ffaf ffc8 ffe4 
	0021 0034 0031 002c 0025 001d 0014 000a 

[MCU #13] ZZ:
[Y]:
	00f7 ffa6 fe8b ffed 0044 ffac ffb4 0040 
	ffef ffa6 ff9e 0002 fff0 003a ffbf ffcd 
	0031 fff2 0002 ffd7 00c5 00bb ffdc ffd9 
	0001 fff4 0026 ffdd ffef 001a fff7 0001 
	ffdd ffde ff71 0021 0034 ff79 ffe2 ffe2 
	0001 fffa 000d fffd 0000 ffe9 ffe6 ff87 
	0031 002c ff99 ffec fff0 0000 fff8 fff2 
	ffaf 0025 001d ffc8 fff9 ffe4 0014 000a 

[MCU #13] Quantification:
[Y]:
	0031 ffe2 ff84 fffd 0009 fff9 fffb 0003 
	fffc ffea ffe8 0000 fffe 0003 fffd fffd 
	000c fffd 0000 fffb 0010 000b ffff fffe 
	0000 fffe 0005 fffd ffff 0001 0000 0000 
	fff9 fffc fff3 0001 0002 fffc 0000 ffff 
	0000 0000 0000 0000 0000 0000 0000 fffc 
	0003 0002 fffc 0000 0000 0000 0000 0000 
	fffd 0001 0001 ffff 0000 0000 0000 0000 

[MCU #13] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 58, magnitude = 6, index = 58
		bitstream => writing 14 over 4 bits
		bitstream => writing 58 over 6 bits

AC:
	value = -30, magnitude = 5, index = 1
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 1 over 5 bits
	value = -124, magnitude = 7, index = 3
	RLE code = 7, huffman path = 248, nb_bits = 8
		bitstream => writing 248 over 8 bits
		bitstream => writing 3 over 7 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = -24, magnitude = 5, index = 7
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 7 over 5 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 0 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 115, huffman path = 65454, nb_bits = 16
		bitstream => writing 65454 over 16 bits
		bitstream => writing 3 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 82, huffman path = 2039, nb_bits = 11
		bitstream => writing 2039 over 11 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #14] Valeurs "niveaux de gris" initiales:
b8 8e 36 88 6f 87 50 4a    
f8 d2 e9 e4 4a 0d 35 64    
07 d8 fa 73 a6 9d 39 85    
a5 03 db 00 2e 22 22 98    
09 0c 55 48 f9 5e 78 2a    
6a e4 6a 67 f9 37 f2 57    
97 a8 b7 1d 48 6c 36 2a    
2c 25 c5 b0 cc 44 73 06    

[MCU #14] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	b8 8e 36 88 6f 87 50 4a 
	f8 d2 e9 e4 4a 0d 35 64 
	07 d8 fa 73 a6 9d 39 85 
	a5 03 db 00 2e 22 22 98 
	09 0c 55 48 f9 5e 78 2a 
	6a e4 6a 67 f9 37 f2 57 
	97 a8 b7 1d 48 6c 36 2a 
	2c 25 c5 b0 cc 44 73 06 

[MCU #14] Downsampling:
[Y]:
	b8 8e 36 88 6f 87 50 4a 
	f8 d2 e9 e4 4a 0d 35 64 
	07 d8 fa 73 a6 9d 39 85 
	a5 03 db 00 2e 22 22 98 
	09 0c 55 48 f9 5e 78 2a 
	6a e4 6a 67 f9 37 f2 57 
	97 a8 b7 1d 48 6c 36 2a 
	2c 25 c5 b0 cc 44 73 06 

[MCU #14] DCT:
[Y]:
	ff96 008c ffa3 ffcc ffea ffd8 0003 0087 
	0037 004d 0058 ffd6 0032 fffb 0036 ff8d 
	0030 0071 ffeb 0017 000d 0041 ffe1 ff9d 
	000d ffdc 0036 0094 001c ffff ff6c fff5 
	ff71 ff8f ffc7 0043 0053 0044 0041 002f 
	ffc3 0010 0088 0016 ffc6 ffd6 0076 ffe5 
	004f ff8b ffa2 0014 ffd3 ffb9 ff8d 0006 
	ffda ffb7 ff89 0031 ffc4 ffaa 000a ffd9 

[MCU #14] ZZ:
[Y]:
	ff96 008c 0037 0030 004d ffa3 ffcc 0058 
	0071 000d ff71 ffdc ffeb ffd6 ffea ffd8 
	0032 0017 0036 ff8f ffc3 004f 0010 ffc7 
	0094 000d fffb 0003 0087 0036 0041 001c 
	0043 0088 ff8b ffda ffb7 ffa2 0016 0053 
	ffff ffe1 ff8d ff9d ff6c 0044 ffc6 0014 
	ff89 0031 ffd3 ffd6 0041 fff5 002f 0076 
	ffb9 ffc4 ffaa ff8d ffe5 0006 000a ffd9 

[MCU #14] Quantification:
[Y]:
	ffeb 002e 0012 0009 000b fff9 fffd 0004 
	001c 0003 ffdd fffa fffe fffe ffff fffe 
	000c 0005 000a fff0 fffb 0004 0000 fffd 
	0025 0002 0000 0000 0009 0002 0002 0001 
	000d 0013 fff6 fffe fffd fffe 0000 0003 
	0000 fffe fffa fffb fffa 0002 ffff 0000 
	fff9 0002 ffff ffff 0002 0000 0001 0003 
	fffd fffe fffe fffd 0000 0000 0000 ffff 

[MCU #14] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -70, magnitude = 7, index = 57
		bitstream => writing 30 over 5 bits
		bitstream => writing 57 over 7 bits

AC:
	value = 46, magnitude = 6, index = 46
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 46 over 6 bits
	value = 18, magnitude = 5, index = 18
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 18 over 5 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 28, magnitude = 5, index = 28
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 28 over 5 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -35, magnitude = 6, index = 28
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 28 over 6 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = -16, magnitude = 5, index = 15
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 15 over 5 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = 37, magnitude = 6, index = 37
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 37 over 6 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 36, huffman path = 4084, nb_bits = 12
		bitstream => writing 4084 over 12 bits
		bitstream => writing 9 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = 19, magnitude = 5, index = 19
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 19 over 5 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 0 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 49, huffman path = 58, nb_bits = 6
		bitstream => writing 58 over 6 bits
		bitstream => writing 0 over 1 bits
[MCU #15] Valeurs "niveaux de gris" initiales:
20 1b 24 9b a7 c6 db aa    
d7 5b 8c 93 3a 42 86 a1    
64 67 fd bc 8d 48 fe 97    
e1 74 40 6f ce c1 f7 9b    
fa 78 ed fe 1c b2 de c1    
a9 f1 1b 60 fa ea 6d 4b    
3f 87 2e ba 42 16 9f 64    
10 28 ab 3c 74 f8 20 dd    

[MCU #15] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	20 1b 24 9b a7 c6 db aa 
	d7 5b 8c 93 3a 42 86 a1 
	64 67 fd bc 8d 48 fe 97 
	e1 74 40 6f ce c1 f7 9b 
	fa 78 ed fe 1c b2 de c1 
	a9 f1 1b 60 fa ea 6d 4b 
	3f 87 2e ba 42 16 9f 64 
	10 28 ab 3c 74 f8 20 dd 

[MCU #15] Downsampling:
[Y]:
	20 1b 24 9b a7 c6 db aa 
	d7 5b 8c 93 3a 42 86 a1 
	64 67 fd bc 8d 48 fe 97 
	e1 74 40 6f ce c1 f7 9b 
	fa 78 ed fe 1c b2 de c1 
	a9 f1 1b 60 fa ea 6d 4b 
	3f 87 2e ba 42 16 9f 64 
	10 28 ab 3c 74 f8 20 dd 

[MCU #15] DCT:
[Y]:
	005f ff8a 000f 0013 000b 0057 fffb ffed 
	0034 ffd8 0019 fff5 001f 0079 ffd9 0043 
	ff41 ff87 ffbf ffc6 0009 ffaa 0034 ffe0 
	000c 0015 fff5 0071 0011 ffec ffac ffa7 
	0038 ff79 fffe 0028 fff8 000b 007e ffe6 
	ffcb ffab ffd0 003d 0008 fff4 ff5a 001a 
	0031 ffbd ff97 003b ffc6 ff86 0019 0024 
	0011 ffff ffee ff31 ffdc 00a2 0002 fffd 

[MCU #15] ZZ:
[Y]:
	005f ff8a 0034 ff41 ffd8 000f 0013 0019 
	ff87 000c 0038 0015 ffbf fff5 000b 0057 
	001f ffc6 fff5 ff79 ffcb 0031 ffab fffe 
	0071 0009 0079 fffb ffed ffd9 ffaa 0011 
	0028 ffd0 ffbd 0011 ffff ff97 003d fff8 
	ffec 0034 0043 ffe0 ffac 000b 0008 003b 
	ffee ff31 ffc6 fff4 007e ffa7 ffe6 ff5a 
	ff86 ffdc 00a2 0019 001a 0024 0002 fffd 

[MCU #15] Quantification:
[Y]:
	0013 ffd9 0011 ffda fffb 0001 0001 0001 
	ffe2 0003 000e 0003 fff8 0000 0000 0005 
	0007 fff2 fffe ffed fffc 0002 fffc 0000 
	001c 0001 0011 0000 ffff ffff fffd 0000 
	0008 fffa fffa 0001 0000 fffd 0001 0000 
	fffe 0004 0003 ffff fffd 0000 0000 0002 
	ffff fff6 fffe 0000 0004 fffe 0000 fffb 
	fffb ffff 0005 0000 0000 0001 0000 0000 

[MCU #15] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 40, magnitude = 6, index = 40
		bitstream => writing 14 over 4 bits
		bitstream => writing 40 over 6 bits

AC:
	value = -39, magnitude = 6, index = 24
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 24 over 6 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = -38, magnitude = 6, index = 25
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 25 over 6 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -30, magnitude = 5, index = 1
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 1 over 5 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 5 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -19, magnitude = 5, index = 12
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 12 over 5 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 28, magnitude = 5, index = 28
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 28 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 8 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #16] Valeurs "niveaux de gris" initiales:
0d 88 6d 91 39 58 ec 78    
68 ff 58 d8 99 2a 6c ce    
dd 4c d7 d6 72 72 5b 2b    
e8 1c a1 94 a6 0f 3e ed    
a6 e0 88 31 c3 c3 fd 15    
b3 d8 15 a6 3d 56 86 a0    
f7 bb 79 30 81 7f 84 a7    
8d 70 7d 4d 00 a3 3b 49    

[MCU #16] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	0d 88 6d 91 39 58 ec 78 
	68 ff 58 d8 99 2a 6c ce 
	dd 4c d7 d6 72 72 5b 2b 
	e8 1c a1 94 a6 0f 3e ed 
	a6 e0 88 31 c3 c3 fd 15 
	b3 d8 15 a6 3d 56 86 a0 
	f7 bb 79 30 81 7f 84 a7 
	8d 70 7d 4d 00 a3 3b 49 

[MCU #16] Downsampling:
[Y]:
	0d 88 6d 91 39 58 ec 78 
	68 ff 58 d8 99 2a 6c ce 
	dd 4c d7 d6 72 72 5b 2b 
	e8 1c a1 94 a6 0f 3e ed 
	a6 e0 88 31 c3 c3 fd 15 
	b3 d8 15 a6 3d 56 86 a0 
	f7 bb 79 30 81 7f 84 a7 
	8d 70 7d 4d 00 a3 3b 49 

[MCU #16] DCT:
[Y]:
	0017 005c 0062 fff8 0013 0020 ffc9 ffef 
	001c ffcd ff9a ff81 0029 0025 ffad 0010 
	ffa8 ffcf 000d ffc2 ffa8 fff6 ffef ffa2 
	001d ffa5 0038 0022 ff9c ffd5 ff51 ffe2 
	ffc2 ffb5 ffe5 0015 ffac 001e 0027 0042 
	fff4 ffec 002f ffde 0060 0031 005c 0048 
	ffb2 0012 ffce ffff ffdb 0072 0023 ffbd 
	002e 001f ffbe 0080 ff51 0027 000a 0048 

[MCU #16] ZZ:
[Y]:
	0017 005c 001c ffa8 ffcd 0062 fff8 ff9a 
	ffcf 001d ffc2 ffa5 000d ff81 0013 0020 
	0029 ffc2 0038 ffb5 fff4 ffb2 ffec ffe5 
	0022 ffa8 0025 ffc9 ffef ffad fff6 ff9c 
	0015 002f 0012 002e 001f ffce ffde ffac 
	ffd5 ffef 0010 ffa2 ff51 001e 0060 ffff 
	ffbe 0080 ffdb 0031 0027 ffe2 0042 005c 
	0072 ff51 0027 0023 0048 ffbd 000a 0048 

[MCU #16] Quantification:
[Y]:
	0004 001e 0009 ffef fff9 0008 0000 fffb 
	fff4 0007 fff1 fff1 0001 fff9 0001 0001 
	000a fff1 000b fff6 ffff fffc 0000 ffff 
	0008 ffef 0005 fffa ffff fffd 0000 fffb 
	0004 0006 0001 0002 0001 ffff ffff fffd 
	fffa ffff 0000 fffc fff9 0000 0002 0000 
	fffc 0006 ffff 0001 0001 0000 0001 0003 
	0005 fffa 0001 0001 0002 fffe 0000 0002 

[MCU #16] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -15, magnitude = 4, index = 0
		bitstream => writing 5 over 3 bits
		bitstream => writing 0 over 4 bits

AC:
	value = 30, magnitude = 5, index = 30
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 30 over 5 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
[MCU #17] Valeurs "niveaux de gris" initiales:
23 50 19 ca 26 28 bc df    
a3 c6 df c7 2d 78 58 26    
47 22 6a be 52 a8 8e 59    
09 30 31 9b ff c2 04 a4    
cd 8a 5e 71 ff c3 b7 09    
b4 18 e2 d3 51 03 7a bb    
7f c3 3a cb b4 a5 2c 4c    
0c 3f 32 d9 3b d6 1f 67    

[MCU #17] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	23 50 19 ca 26 28 bc df 
	a3 c6 df c7 2d 78 58 26 
	47 22 6a be 52 a8 8e 59 
	09 30 31 9b ff c2 04 a4 
	cd 8a 5e 71 ff c3 b7 09 
	b4 18 e2 d3 51 03 7a bb 
	7f c3 3a cb b4 a5 2c 4c 
	0c 3f 32 d9 3b d6 1f 67 

[MCU #17] Downsampling:
[Y]:
	23 50 19 ca 26 28 bc df 
	a3 c6 df c7 2d 78 58 26 
	47 22 6a be 52 a8 8e 59 
	09 30 31 9b ff c2 04 a4 
	cd 8a 5e 71 ff c3 b7 09 
	b4 18 e2 d3 51 03 7a bb 
	7f c3 3a cb b4 a5 2c 4c 
	0c 3f 32 d9 3b d6 1f 67 

[MCU #17] DCT:
[Y]:
	ffc1 ffe5 ff67 fff2 0053 003a 0003 ff82 
	fff9 ffe0 003f ffbd ffd7 0036 ffd6 0015 
	ffbe fffa 003a ff89 ffe0 002e ffda ff6c 
	0044 0031 007d ffc3 0033 0041 ffb7 006f 
	ffd0 ff65 ffda 0051 001f ffac ffde ffe5 
	ffd1 ff7e ffe9 ffe9 0066 ff9f ffde ffd2 
	ffbe ff7b 0038 ff85 0031 0087 0026 0013 
	0020 0001 0003 0095 ffc0 0015 ffac 0000 

[MCU #17] ZZ:
[Y]:
	ffc1 ffe5 fff9 ffbe ffe0 ff67 fff2 003f 
	fffa 0044 ffd0 0031 003a ffbd 0053 003a 
	ffd7 ff89 007d ff65 ffd1 ffbe ff7e ffda 
	ffc3 ffe0 0036 0003 ff82 ffd6 002e 0033 
	0051 ffe9 ff7b 0020 0001 0038 ffe9 001f 
	0041 ffda 0015 ff6c ffb7 ffac 0066 ff85 
	0003 0095 0031 ff9f ffde 006f ffe5 ffde 
	0087 ffc0 0015 0026 ffd2 0013 ffac 0000 

[MCU #17] Quantification:
[Y]:
	fff4 fff7 fffe fff3 fffc fff4 0000 0003 
	ffff 0011 fff4 0008 0007 fffd 0004 0003 
	fff6 ffe3 0019 ffea fffd fffd fffa fffe 
	fff1 fffa 0007 0000 fff8 ffff 0001 0002 
	0010 fffd fff4 0001 0000 0001 0000 0001 
	0009 fffd 0001 fff9 fffd fffe 0003 fffc 
	0000 0007 0002 fffd ffff 0003 0000 ffff 
	0006 fffe 0000 0001 ffff 0000 fffe 0000 

[MCU #17] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -16, magnitude = 5, index = 15
		bitstream => writing 6 over 3 bits
		bitstream => writing 15 over 5 bits

AC:
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -29, magnitude = 5, index = 2
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 2 over 5 bits
	value = 25, magnitude = 5, index = 25
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 25 over 5 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 7 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 7 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #18] Valeurs "niveaux de gris" initiales:
b6 f2 67 25 79 b7 70 9a    
4a 41 0a 95 4e 3f f9 25    
80 88 cd 27 25 06 ac 8a    
c5 df a4 f3 02 c7 8b e3    
cf 0c 51 c8 6b c9 f3 65    
e8 e5 22 e1 1c 14 39 c5    
4d e4 69 95 50 9f c0 8f    
fb e4 17 c7 28 8b cd 38    

[MCU #18] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	b6 f2 67 25 79 b7 70 9a 
	4a 41 0a 95 4e 3f f9 25 
	80 88 cd 27 25 06 ac 8a 
	c5 df a4 f3 02 c7 8b e3 
	cf 0c 51 c8 6b c9 f3 65 
	e8 e5 22 e1 1c 14 39 c5 
	4d e4 69 95 50 9f c0 8f 
	fb e4 17 c7 28 8b cd 38 

[MCU #18] Downsampling:
[Y]:
	b6 f2 67 25 79 b7 70 9a 
	4a 41 0a 95 4e 3f f9 25 
	80 88 cd 27 25 06 ac 8a 
	c5 df a4 f3 02 c7 8b e3 
	cf 0c 51 c8 6b c9 f3 65 
	e8 e5 22 e1 1c 14 39 c5 
	4d e4 69 95 50 9f c0 8f 
	fb e4 17 c7 28 8b cd 38 

[MCU #18] DCT:
[Y]:
	002e 0033 00b3 000c ffdc 0083 ff84 ff66 
	ffbc ffcb fffc fff2 ffd3 ffd5 0033 0079 
	ffd3 001c 0005 005b ffbf ffa9 ffa0 000d 
	0011 fff8 fffa 002d 0052 ffb6 000f ffd6 
	0087 000c 0002 0074 fffa 0015 0050 ffba 
	0064 0028 0035 ff8f ffb1 ff56 004c ffd3 
	fff2 008d 0076 ffc6 003a ffb7 001b 0015 
	ffe7 ffb5 ffd8 0030 ffb6 000d 002c 0096 

[MCU #18] ZZ:
[Y]:
	002e 0033 ffbc ffd3 ffcb 00b3 000c fffc 
	001c 0011 0087 fff8 0005 fff2 ffdc 0083 
	ffd3 005b fffa 000c 0064 fff2 0028 0002 
	002d ffbf ffd5 ff84 ff66 0033 ffa9 0052 
	0074 0035 008d ffe7 ffb5 0076 ff8f fffa 
	ffb6 ffa0 0079 000d 000f 0015 ffb1 ffc6 
	ffd8 0030 003a ff56 0050 ffd6 ffba 004c 
	ffb7 ffb6 000d 001b ffd3 0015 002c 0096 

[MCU #18] Quantification:
[Y]:
	0009 0011 ffea fff7 fff9 000e 0000 0000 
	0007 0004 0021 ffff 0000 0000 fffe 0007 
	fff5 0016 ffff 0001 0008 0000 0001 0000 
	000b fff3 fffa fff3 fff6 0001 fffd 0004 
	0017 0007 000c ffff fffd 0003 fffd 0000 
	fff6 fff8 0007 0000 0000 0000 fffe fffe 
	fffe 0002 0002 fffa 0002 ffff ffff 0002 
	fffd fffe 0000 0000 ffff 0000 0001 0005 

[MCU #18] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 21, magnitude = 5, index = 21
		bitstream => writing 6 over 3 bits
		bitstream => writing 21 over 5 bits

AC:
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 7 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 33, magnitude = 6, index = 33
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 33 over 6 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 1 over 2 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = 22, magnitude = 5, index = 22
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 22 over 5 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 11 over 4 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 23, magnitude = 5, index = 23
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 23 over 5 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 5 over 4 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
[MCU #19] Valeurs "niveaux de gris" initiales:
d2 94 35 79 5a 10 23 67    
9b 85 b9 d5 c7 3f 77 2f    
6d aa 46 fa f2 44 92 cf    
3b cc 52 09 8d 49 a4 75    
41 e0 63 5e 92 41 1f 38    
06 54 26 00 3e 93 4c f1    
26 ee 49 68 04 e8 cd fb    
b3 78 75 27 70 95 04 fd    

[MCU #19] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	d2 94 35 79 5a 10 23 67 
	9b 85 b9 d5 c7 3f 77 2f 
	6d aa 46 fa f2 44 92 cf 
	3b cc 52 09 8d 49 a4 75 
	41 e0 63 5e 92 41 1f 38 
	06 54 26 00 3e 93 4c f1 
	26 ee 49 68 04 e8 cd fb 
	b3 78 75 27 70 95 04 fd 

[MCU #19] Downsampling:
[Y]:
	d2 94 35 79 5a 10 23 67 
	9b 85 b9 d5 c7 3f 77 2f 
	6d aa 46 fa f2 44 92 cf 
	3b cc 52 09 8d 49 a4 75 
	41 e0 63 5e 92 41 1f 38 
	06 54 26 00 3e 93 4c f1 
	26 ee 49 68 04 e8 cd fb 
	b3 78 75 27 70 95 04 fd 

[MCU #19] DCT:
[Y]:
	ffb1 fff2 0052 ffcc 0024 ff5a ffb6 ffca 
	0017 00a8 ff80 000c 0073 006c ff80 005b 
	002a 0030 0044 0008 0050 003e 0070 ffd7 
	ff74 0003 002b 0006 ffc6 fffa 0019 ffd0 
	ff9d 008a 0031 002b 0010 ffc4 0018 0036 
	0011 ff92 0074 0000 ffb1 0000 ffc1 ffbc 
	ffd1 ffc1 0026 fffd 008b ffd3 002f 0001 
	0049 0033 ffd5 ffea 0026 0003 ffc0 ffb3 

[MCU #19] ZZ:
[Y]:
	ffb1 fff2 0017 002a 00a8 0052 ffcc ff80 
	0030 ff74 ff9d 0003 0044 000c 0024 ff5a 
	0073 0008 002b 008a 0011 ffd1 ff92 0031 
	0006 0050 006c ffb6 ffca ff80 003e ffc6 
	002b 0074 ffc1 0049 0033 0026 0000 0010 
	fffa 0070 005b ffd7 0019 ffc4 ffb1 fffd 
	ffd5 ffea 008b 0000 0018 ffd0 0036 ffc1 
	ffd3 0026 0003 002f ffbc 0001 ffc0 ffb3 

[MCU #19] Quantification:
[Y]:
	fff1 fffc 0007 0008 0018 0006 fffd fff9 
	000c ffdd ffe8 0000 0008 0000 0002 fff7 
	001c 0002 0008 0013 0001 fffe fffb 0002 
	0001 0010 000f fff8 fffd fffc 0002 fffd 
	0008 0010 fffb 0004 0002 0001 0000 0000 
	0000 000a 0005 fffe 0001 ffff fffe 0000 
	fffe ffff 0006 0000 0000 ffff 0001 fffe 
	fffe 0001 0000 0001 fffe 0000 fffe fffe 

[MCU #19] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -24, magnitude = 5, index = 7
		bitstream => writing 6 over 3 bits
		bitstream => writing 7 over 5 bits

AC:
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 24, magnitude = 5, index = 24
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 24 over 5 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = -35, magnitude = 6, index = 28
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 28 over 6 bits
	value = -24, magnitude = 5, index = 7
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 7 over 5 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 8 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 28, magnitude = 5, index = 28
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 28 over 5 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 19, magnitude = 5, index = 19
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 19 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 52, huffman path = 65423, nb_bits = 16
		bitstream => writing 65423 over 16 bits
		bitstream => writing 10 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
[MCU #20] Valeurs "niveaux de gris" initiales:
99 91 91 91 91 91 91 91    
3e cf cf cf cf cf cf cf    
91 69 69 69 69 69 69 69    
65 46 46 46 46 46 46 46    
21 a7 a7 a7 a7 a7 a7 a7    
6b 61 61 61 61 61 61 61    
a4 46 46 46 46 46 46 46    
06 81 81 81 81 81 81 81    

[MCU #20] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	99 91 91 91 91 91 91 91 
	3e cf cf cf cf cf cf cf 
	91 69 69 69 69 69 69 69 
	65 46 46 46 46 46 46 46 
	21 a7 a7 a7 a7 a7 a7 a7 
	6b 61 61 61 61 61 61 61 
	a4 46 46 46 46 46 46 46 
	06 81 81 81 81 81 81 81 

[MCU #20] Downsampling:
[Y]:
	99 91 91 91 91 91 91 91 
	3e cf cf cf cf cf cf cf 
	91 69 69 69 69 69 69 69 
	65 46 46 46 46 46 46 46 
	21 a7 a7 a7 a7 a7 a7 a7 
	6b 61 61 61 61 61 61 61 
	a4 46 46 46 46 46 46 46 
	06 81 81 81 81 81 81 81 

[MCU #20] DCT:
[Y]:
	ffc3 ffdb ffdd ffe0 ffe5 ffeb fff2 fff9 
	009f fffb fffc fffc fffd fffe fffe ffff 
	0050 fff4 fff5 fff6 fff8 fffa fffc fffe 
	0034 0008 0007 0007 0006 0004 0003 0001 
	0004 ffdb ffdd ffe1 ffe5 ffeb fff2 fff9 
	ff2f 006e 0067 005d 004f 003e 002b 0015 
	ffc2 0015 0014 0012 000f 000c 0008 0004 
	002c 0005 0004 0004 0003 0002 0002 0001 

[MCU #20] ZZ:
[Y]:
	ffc3 ffdb 009f 0050 fffb ffdd ffe0 fffc 
	fff4 0034 0004 0008 fff5 fffc ffe5 ffeb 
	fffd fff6 0007 ffdb ff2f ffc2 006e ffdd 
	0007 fff8 fffe fff2 fff9 fffe fffa 0006 
	ffe1 0067 0015 002c 0005 0014 005d ffe5 
	0004 fffc ffff fffe 0003 ffeb 004f 0012 
	0004 0004 000f 003e fff2 0001 fff9 002b 
	000c 0003 0002 0008 0015 0004 0002 0001 

[MCU #20] Quantification:
[Y]:
	fff4 fff4 0035 0010 0000 fffe fffe 0000 
	fffd 000d 0001 0001 ffff 0000 ffff ffff 
	0000 fffe 0001 fffb ffef fffd 0005 fffe 
	0001 ffff 0000 ffff 0000 0000 0000 0000 
	fffa 000e 0001 0002 0000 0000 0003 ffff 
	0000 0000 0000 0000 0000 0000 0002 0000 
	0000 0000 0000 0002 0000 0000 0000 0001 
	0000 0000 0000 0000 0000 0000 0000 0000 

[MCU #20] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 3, magnitude = 2, index = 3
		bitstream => writing 3 over 3 bits
		bitstream => writing 3 over 2 bits

AC:
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 53, magnitude = 6, index = 53
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 53 over 6 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 67, huffman path = 65430, nb_bits = 16
		bitstream => writing 65430 over 16 bits
		bitstream => writing 1 over 3 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 98, huffman path = 4086, nb_bits = 12
		bitstream => writing 4086 over 12 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 66, huffman path = 1016, nb_bits = 10
		bitstream => writing 1016 over 10 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 49, huffman path = 58, nb_bits = 6
		bitstream => writing 58 over 6 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #21] Valeurs "niveaux de gris" initiales:
4b 06 25 86 4f 31 c6 81    
ff a4 14 5e 87 f8 2c ff    
3e fc b6 17 56 f7 ef b0    
a6 77 38 cb b8 cc 2c f3    
e3 3f b3 7d 1c 82 a1 fc    
8f 00 45 3a 62 98 90 c2    
44 d2 cd 6b 4f df 54 78    
94 63 23 1c fa a8 27 c0    

[MCU #21] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	4b 06 25 86 4f 31 c6 81 
	ff a4 14 5e 87 f8 2c ff 
	3e fc b6 17 56 f7 ef b0 
	a6 77 38 cb b8 cc 2c f3 
	e3 3f b3 7d 1c 82 a1 fc 
	8f 00 45 3a 62 98 90 c2 
	44 d2 cd 6b 4f df 54 78 
	94 63 23 1c fa a8 27 c0 

[MCU #21] Downsampling:
[Y]:
	4b 06 25 86 4f 31 c6 81 
	ff a4 14 5e 87 f8 2c ff 
	3e fc b6 17 56 f7 ef b0 
	a6 77 38 cb b8 cc 2c f3 
	e3 3f b3 7d 1c 82 a1 fc 
	8f 00 45 3a 62 98 90 c2 
	44 d2 cd 6b 4f df 54 78 
	94 63 23 1c fa a8 27 c0 

[MCU #21] DCT:
[Y]:
	0024 ff6e 008b 0043 002b ffb0 007a ffb5 
	000f ffe0 002f ffff 0004 0041 ffbf ffd3 
	ff98 ffff ffcd 003a 000d ffc9 ffc3 0023 
	ff8b ffe2 0019 ffc2 0033 00c6 0008 0027 
	ffd0 ffed ffe7 ffec 00af 003f ffe6 0025 
	ffe9 0004 ff80 ffb6 ff98 000b ffbf ffe8 
	ffb2 ff97 0004 0006 ffc1 002d ffbd 006f 
	001e 001e 001f ff94 ff29 0040 ffed 002d 

[MCU #21] ZZ:
[Y]:
	0024 ff6e 000f ff98 ffe0 008b 0043 002f 
	ffff ff8b ffd0 ffe2 ffcd ffff 002b ffb0 
	0004 003a 0019 ffed ffe9 ffb2 0004 ffe7 
	ffc2 000d 0041 007a ffb5 ffbf ffc9 0033 
	ffec ff80 ff97 001e 001e 0004 ffb6 00af 
	00c6 ffc3 ffd3 0023 0008 003f ff98 0006 
	001f ff94 ffc1 000b ffe6 0027 0025 ffbf 
	002d ff29 0040 ffbd ffe8 006f ffed 002d 

[MCU #21] Quantification:
[Y]:
	0007 ffd0 0005 ffec fffc 000b 0004 0002 
	0000 ffe3 fff4 fffb fffa 0000 0002 fffc 
	0001 000e 0005 fffe ffff fffc 0000 ffff 
	fff1 0002 0009 000d fffb fffe fffe 0002 
	fffc ffee fff7 0001 0001 0000 fffe 0007 
	001c fffb fffe 0001 0000 0002 fffd 0000 
	0002 fffb fffe 0000 0000 0001 0001 fffe 
	0002 fff9 0002 fffe 0000 0003 0000 0001 

[MCU #21] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 19, magnitude = 5, index = 19
		bitstream => writing 6 over 3 bits
		bitstream => writing 19 over 5 bits

AC:
	value = -48, magnitude = 6, index = 15
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 15 over 6 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -20, magnitude = 5, index = 11
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 11 over 5 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -29, magnitude = 5, index = 2
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 2 over 5 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 28, magnitude = 5, index = 28
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 28 over 5 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
[MCU #22] Valeurs "niveaux de gris" initiales:
0a 01 57 29 68 52 0d 7f    
e1 f8 7e 4c 0f 02 db ad    
85 e1 41 69 d2 75 61 21    
90 9e c4 96 4f 90 51 16    
dd 7f 2f 5f 03 d9 19 53    
6c 44 24 8d db c6 61 ef    
7c 3a ec 74 b0 5f b1 60    
7b 37 6d 43 8c ec d8 4b    

[MCU #22] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	0a 01 57 29 68 52 0d 7f 
	e1 f8 7e 4c 0f 02 db ad 
	85 e1 41 69 d2 75 61 21 
	90 9e c4 96 4f 90 51 16 
	dd 7f 2f 5f 03 d9 19 53 
	6c 44 24 8d db c6 61 ef 
	7c 3a ec 74 b0 5f b1 60 
	7b 37 6d 43 8c ec d8 4b 

[MCU #22] Downsampling:
[Y]:
	0a 01 57 29 68 52 0d 7f 
	e1 f8 7e 4c 0f 02 db ad 
	85 e1 41 69 d2 75 61 21 
	90 9e c4 96 4f 90 51 16 
	dd 7f 2f 5f 03 d9 19 53 
	6c 44 24 8d db c6 61 ef 
	7c 3a ec 74 b0 5f b1 60 
	7b 37 6d 43 8c ec d8 4b 

[MCU #22] DCT:
[Y]:
	ffae 0013 0017 0052 ffe9 fff8 0022 0005 
	ff9a 0067 0051 ffa9 0007 ffc6 ffb6 ffe6 
	ffd3 ff7d 0005 ffce fff0 001b fff5 0082 
	ffb4 ff90 000d ffd2 0079 ffd9 0067 ffd7 
	ff87 0002 ffd6 0032 ffca 0023 007f ffb7 
	ffdc 0003 ff49 ffbc 0003 fff4 0025 0062 
	ffe0 ff85 ff8e 0062 004e ff86 fffe ffd9 
	ffc0 002d ffea 003c fffd ffec 0010 fff8 

[MCU #22] ZZ:
[Y]:
	ffae 0013 ff9a ffd3 0067 0017 0052 0051 
	ff7d ffb4 ff87 ff90 0005 ffa9 ffe9 fff8 
	0007 ffce 000d 0002 ffdc ffe0 0003 ffd6 
	ffd2 fff0 ffc6 0022 0005 ffb6 001b 0079 
	0032 ff49 ff85 ffc0 002d ff8e ffbc ffca 
	ffd9 fff5 ffe6 0082 0067 0023 0003 0062 
	ffea 003c 004e fff4 007f ffd7 ffb7 0025 
	ff86 fffd ffec fffe 0062 ffd9 0010 fff8 

[MCU #22] Quantification:
[Y]:
	fff0 0006 ffde fff7 000e 0001 0005 0004 
	ffe0 ffed ffe2 ffee 0000 fffb ffff 0000 
	0001 fff4 0002 0000 fffd ffff 0000 fffe 
	fff5 fffd fff8 0003 0000 fffe 0001 0006 
	000a ffe6 fff5 fffd 0002 fffd fffe fffe 
	fffb ffff ffff 0006 0004 0001 0000 0003 
	ffff 0003 0003 0000 0004 ffff fffe 0001 
	fffb 0000 0000 0000 0002 ffff 0000 0000 

[MCU #22] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -23, magnitude = 5, index = 8
		bitstream => writing 6 over 3 bits
		bitstream => writing 8 over 5 bits

AC:
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -34, magnitude = 6, index = 29
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 29 over 6 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -32, magnitude = 6, index = 31
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 31 over 6 bits
	value = -19, magnitude = 5, index = 12
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 12 over 5 bits
	value = -30, magnitude = 5, index = 1
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 1 over 5 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = -26, magnitude = 5, index = 5
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 5 over 5 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #23] Valeurs "niveaux de gris" initiales:
19 35 0a e6 6e bd 5e e3    
d6 9c 10 2c 66 75 d9 5a    
31 51 9c ec 23 10 25 41    
b3 04 cd 86 3c 65 9a dd    
3b 9f cf 91 b5 ea ab 62    
84 b7 a5 3e eb d9 27 7d    
35 86 a0 cc c8 25 88 96    
ba 4c 5f 01 3c ad 34 a0    

[MCU #23] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	19 35 0a e6 6e bd 5e e3 
	d6 9c 10 2c 66 75 d9 5a 
	31 51 9c ec 23 10 25 41 
	b3 04 cd 86 3c 65 9a dd 
	3b 9f cf 91 b5 ea ab 62 
	84 b7 a5 3e eb d9 27 7d 
	35 86 a0 cc c8 25 88 96 
	ba 4c 5f 01 3c ad 34 a0 

[MCU #23] Downsampling:
[Y]:
	19 35 0a e6 6e bd 5e e3 
	d6 9c 10 2c 66 75 d9 5a 
	31 51 9c ec 23 10 25 41 
	b3 04 cd 86 3c 65 9a dd 
	3b 9f cf 91 b5 ea ab 62 
	84 b7 a5 3e eb d9 27 7d 
	35 86 a0 cc c8 25 88 96 
	ba 4c 5f 01 3c ad 34 a0 

[MCU #23] DCT:
[Y]:
	ffde ffcb ffe8 ffe4 001c fffb 0039 ffe7 
	ffd0 ffc7 000c fff3 0028 006a ffbb ffa3 
	ffb1 ffc7 0048 0042 0046 ffdb ffd7 ffb5 
	007e ffb2 ff8f 003d ffe8 ff7d ffdd ffe7 
	0017 ff8c 0028 0008 fffd 0022 0079 ffd5 
	fff5 ffce ffb6 ff44 007b 003d 0003 fff0 
	ffba 0025 ffc2 ffe9 0015 ffbf 0062 ffb3 
	ffec 0002 ff5b ff90 ffe9 0014 ffaf ffc7 

[MCU #23] ZZ:
[Y]:
	ffde ffcb ffd0 ffb1 ffc7 ffe8 ffe4 000c 
	ffc7 007e 0017 ffb2 0048 fff3 001c fffb 
	0028 0042 ff8f ff8c fff5 ffba ffce 0028 
	003d 0046 006a 0039 ffe7 ffbb ffdb ffe8 
	0008 ffb6 0025 ffec 0002 ffc2 ff44 fffd 
	ff7d ffd7 ffa3 ffb5 ffdd 0022 007b ffe9 
	ff5b ff90 0015 003d 0079 ffe7 ffd5 0003 
	ffbf ffe9 0014 0062 fff0 ffb3 ffaf ffc7 

[MCU #23] Quantification:
[Y]:
	fffa ffef fff0 fff1 fff8 fffe ffff 0000 
	fff2 001f 0005 fff3 0009 0000 0001 0000 
	000a 0010 ffea fff0 0000 fffc fffe 0002 
	000f 000e 000f 0006 ffff fffe ffff ffff 
	0001 fff6 0003 ffff 0000 ffff fffa 0000 
	ffee fffd fffb fffd ffff 0001 0003 0000 
	fff5 fffb 0000 0002 0003 0000 ffff 0000 
	fffe 0000 0000 0003 0000 fffe fffe ffff 

[MCU #23] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 10, magnitude = 4, index = 10
		bitstream => writing 5 over 3 bits
		bitstream => writing 10 over 4 bits

AC:
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = -16, magnitude = 5, index = 15
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 15 over 5 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 1 over 4 bits
	value = 31, magnitude = 5, index = 31
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 31 over 5 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 10 over 4 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = -16, magnitude = 5, index = 15
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 15 over 5 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 13 over 5 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 4 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
[MCU #24] Valeurs "niveaux de gris" initiales:
e4 ce 78 e9 cc 7e 6a 17    
41 d8 5a 8d f1 90 e4 f1    
94 60 3b c4 72 d0 05 b0    
cf 23 df 5a de 33 82 84    
53 56 60 d3 b3 62 21 97    
11 e9 29 9d e6 73 f8 75    
84 0a c6 d3 10 ad c7 54    
ab c7 b5 09 8e 50 07 22    

[MCU #24] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	e4 ce 78 e9 cc 7e 6a 17 
	41 d8 5a 8d f1 90 e4 f1 
	94 60 3b c4 72 d0 05 b0 
	cf 23 df 5a de 33 82 84 
	53 56 60 d3 b3 62 21 97 
	11 e9 29 9d e6 73 f8 75 
	84 0a c6 d3 10 ad c7 54 
	ab c7 b5 09 8e 50 07 22 

[MCU #24] Downsampling:
[Y]:
	e4 ce 78 e9 cc 7e 6a 17 
	41 d8 5a 8d f1 90 e4 f1 
	94 60 3b c4 72 d0 05 b0 
	cf 23 df 5a de 33 82 84 
	53 56 60 d3 b3 62 21 97 
	11 e9 29 9d e6 73 f8 75 
	84 0a c6 d3 10 ad c7 54 
	ab c7 b5 09 8e 50 07 22 

[MCU #24] DCT:
[Y]:
	0038 0020 ffa3 0010 0046 ffe6 ffd3 000a 
	0071 ffec fff6 0021 0061 ffd5 ffd4 ffd5 
	0016 0078 0019 0031 ff9b 0000 ffe6 ffed 
	003e ffd2 ffb4 0001 ffe6 0030 ff52 ffdc 
	ffc8 00c8 fff1 0010 0040 ffdf 0042 0071 
	0000 003d fff7 0016 fffd 00c6 006e 001c 
	ffde 004e fff1 0046 000b ff99 ffca ffba 
	ffbc 0020 ffd2 fff7 0043 0045 0083 ff50 

[MCU #24] ZZ:
[Y]:
	0038 0020 0071 0016 ffec ffa3 0010 fff6 
	0078 003e ffc8 ffd2 0019 0021 0046 ffe6 
	0061 0031 ffb4 00c8 0000 ffde 003d fff1 
	0001 ff9b ffd5 ffd3 000a ffd4 0000 ffe6 
	0010 fff7 004e ffbc 0020 fff1 0016 0040 
	0030 ffe6 ffd5 ffed ff52 ffdf fffd 0046 
	ffd2 fff7 000b 00c6 0042 ffdc 0071 006e 
	ff99 0043 0045 ffca 001c ffba 0083 ff50 

[MCU #24] Quantification:
[Y]:
	000b 000a 0025 0004 fffe fff9 0001 0000 
	001e 000f fff2 fff9 0003 0001 0003 ffff 
	0018 000c fff1 001c 0000 fffe 0002 0000 
	0000 ffec fffa fffb 0000 ffff 0000 ffff 
	0003 ffff 0007 fffc 0001 0000 0000 0002 
	0006 fffe fffe ffff fff9 ffff 0000 0002 
	fffd 0000 0000 0007 0002 ffff 0003 0003 
	fffc 0002 0002 ffff 0000 fffe 0004 fffb 

[MCU #24] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 17, magnitude = 5, index = 17
		bitstream => writing 6 over 3 bits
		bitstream => writing 17 over 5 bits

AC:
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 37, magnitude = 6, index = 37
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 37 over 6 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 30, magnitude = 5, index = 30
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 30 over 5 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 24, magnitude = 5, index = 24
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 24 over 5 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = 28, magnitude = 5, index = 28
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 28 over 5 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -20, magnitude = 5, index = 11
	RLE code = 37, huffman path = 65417, nb_bits = 16
		bitstream => writing 65417 over 16 bits
		bitstream => writing 11 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 2 over 2 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 7 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
[MCU #25] Valeurs "niveaux de gris" initiales:
84 8f 9d d4 c0 63 55 ca    
34 f8 4f bb f0 7b bb d2    
cc bb c7 22 b3 b7 d3 38    
aa ba 50 62 86 7c 56 16    
a1 d4 14 be 56 b5 ba 33    
73 3d b0 d5 d5 40 97 41    
7f 95 bf ce 74 13 47 f0    
b4 2b 3f ae d3 66 6e 4e    

[MCU #25] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	84 8f 9d d4 c0 63 55 ca 
	34 f8 4f bb f0 7b bb d2 
	cc bb c7 22 b3 b7 d3 38 
	aa ba 50 62 86 7c 56 16 
	a1 d4 14 be 56 b5 ba 33 
	73 3d b0 d5 d5 40 97 41 
	7f 95 bf ce 74 13 47 f0 
	b4 2b 3f ae d3 66 6e 4e 

[MCU #25] Downsampling:
[Y]:
	84 8f 9d d4 c0 63 55 ca 
	34 f8 4f bb f0 7b bb d2 
	cc bb c7 22 b3 b7 d3 38 
	aa ba 50 62 86 7c 56 16 
	a1 d4 14 be 56 b5 ba 33 
	73 3d b0 d5 d5 40 97 41 
	7f 95 bf ce 74 13 47 f0 
	b4 2b 3f ae d3 66 6e 4e 

[MCU #25] DCT:
[Y]:
	005b 003f ffba 0014 0047 fff7 ff8c 000d 
	0058 ffe6 001b 000e ffab ff9c ffde fff5 
	0029 ffb8 ffe2 ff80 0098 ffda 0025 001e 
	000f ffe7 ffcd ff7e 0046 0021 fff3 ffcb 
	ffb7 0026 0002 006f 0020 001b 0002 ffa7 
	ffe1 0052 0029 ffa0 0015 ffef 0069 002a 
	fff8 001b ffc6 005c ffe7 0050 0046 007b 
	0031 0009 0053 0005 ffc4 0014 0018 ffda 

[MCU #25] ZZ:
[Y]:
	005b 003f 0058 0029 ffe6 ffba 0014 001b 
	ffb8 000f ffb7 ffe7 ffe2 000e 0047 fff7 
	ffab ff80 ffcd 0026 ffe1 fff8 0052 0002 
	ff7e 0098 ff9c ff8c 000d ffde ffda 0046 
	006f 0029 001b 0031 0009 ffc6 ffa0 0020 
	0021 0025 fff5 001e fff3 001b 0015 005c 
	0053 0005 ffe7 ffef 0002 ffcb ffa7 0069 
	0050 ffc4 0014 0046 002a 007b 0018 ffda 

[MCU #25] Quantification:
[Y]:
	0012 0015 001d 0008 fffd fffb 0001 0001 
	ffee 0003 ffee fffc fffd 0000 0003 0000 
	ffeb ffe0 fff6 0005 fffe 0000 0003 0000 
	ffe0 001e fff2 fff4 0000 ffff ffff 0003 
	0016 0005 0002 0002 0000 ffff fffd 0001 
	0004 0003 0000 0001 0000 0000 0000 0003 
	0005 0000 ffff 0000 0000 ffff fffe 0003 
	0003 fffe 0000 0002 0001 0004 0000 ffff 

[MCU #25] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 7, magnitude = 3, index = 7
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits

AC:
	value = 21, magnitude = 5, index = 21
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 21 over 5 bits
	value = 29, magnitude = 5, index = 29
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 29 over 5 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -21, magnitude = 5, index = 10
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 10 over 5 bits
	value = -32, magnitude = 6, index = 31
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 31 over 6 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -32, magnitude = 6, index = 31
	RLE code = 22, huffman path = 65412, nb_bits = 16
		bitstream => writing 65412 over 16 bits
		bitstream => writing 31 over 6 bits
	value = 30, magnitude = 5, index = 30
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 30 over 5 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 22, magnitude = 5, index = 22
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 22 over 5 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 3 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
[MCU #26] Valeurs "niveaux de gris" initiales:
64 ad f3 cc ff 00 4c 19    
74 39 1e 83 3b f9 30 12    
98 14 a1 6a 89 02 8b ba    
1a 1a ac 69 aa fe 80 5d    
34 e9 92 38 c2 ab 8b fd    
84 bc ce 5f 82 2f 4f 06    
4e 33 64 fe 92 15 5e c7    
9d db 91 29 c7 69 75 81    

[MCU #26] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	64 ad f3 cc ff 00 4c 19 
	74 39 1e 83 3b f9 30 12 
	98 14 a1 6a 89 02 8b ba 
	1a 1a ac 69 aa fe 80 5d 
	34 e9 92 38 c2 ab 8b fd 
	84 bc ce 5f 82 2f 4f 06 
	4e 33 64 fe 92 15 5e c7 
	9d db 91 29 c7 69 75 81 

[MCU #26] Downsampling:
[Y]:
	64 ad f3 cc ff 00 4c 19 
	74 39 1e 83 3b f9 30 12 
	98 14 a1 6a 89 02 8b ba 
	1a 1a ac 69 aa fe 80 5d 
	34 e9 92 38 c2 ab 8b fd 
	84 bc ce 5f 82 2f 4f 06 
	4e 33 64 fe 92 15 5e c7 
	9d db 91 29 c7 69 75 81 

[MCU #26] DCT:
[Y]:
	ffd5 001d ff93 ffcd 0014 ffbe 0005 0055 
	ffd0 000a ffa7 002a fffd 0046 0030 fff7 
	fff2 008d ffde fffc 004a 0018 ffb5 0006 
	0019 007b ffb7 ffbb ffe4 ffd5 ffb4 0000 
	0079 ffe8 ffde 0009 ffa4 ff73 ffef 003b 
	ffff ffe9 ff94 ff89 0067 0062 fff6 0043 
	0014 0096 0030 ffc3 fff0 fff6 ffcd 00ad 
	0047 ffc1 005f ff77 0079 ffda ffbc 002e 

[MCU #26] ZZ:
[Y]:
	ffd5 001d ffd0 fff2 000a ff93 ffcd ffa7 
	008d 0019 0079 007b ffde 002a 0014 ffbe 
	fffd fffc ffb7 ffe8 ffff 0014 ffe9 ffde 
	ffbb 004a 0046 0005 0055 0030 0018 ffe4 
	0009 ff94 0096 0047 ffc1 0030 ff89 ffa4 
	ffd5 ffb5 fff7 0006 ffb4 ff73 0067 ffc3 
	005f ff77 fff0 0062 ffef 0000 003b fff6 
	fff6 0079 ffda ffcd 0043 00ad ffbc 002e 

[MCU #26] Quantification:
[Y]:
	fff8 0009 fff0 fffe 0001 fff7 fffd fffc 
	0023 0006 001e 0014 fffc 0002 0001 fffd 
	0000 ffff fff2 fffd 0000 0001 ffff fffe 
	ffef 000e 000a 0000 0005 0001 0001 ffff 
	0001 fff1 000d 0004 fffd 0001 fffd fffc 
	fffa fffa 0000 0000 fffd fffc 0003 fffe 
	0006 fff9 0000 0003 0000 0000 0001 0000 
	0000 0004 ffff ffff 0001 0005 fffe 0001 

[MCU #26] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -26, magnitude = 5, index = 5
		bitstream => writing 6 over 3 bits
		bitstream => writing 5 over 5 bits

AC:
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -16, magnitude = 5, index = 15
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 15 over 5 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 35, magnitude = 6, index = 35
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 35 over 6 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 30, magnitude = 5, index = 30
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 30 over 5 bits
	value = 20, magnitude = 5, index = 20
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 20 over 5 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 5 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 0 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
[MCU #27] Valeurs "niveaux de gris" initiales:
36 56 56 56 56 56 56 56    
95 41 41 41 41 41 41 41    
53 27 27 27 27 27 27 27    
02 4d 4d 4d 4d 4d 4d 4d    
4a 5b 5b 5b 5b 5b 5b 5b    
e7 f4 f4 f4 f4 f4 f4 f4    
9b fe fe fe fe fe fe fe    
b5 d4 d4 d4 d4 d4 d4 d4    

[MCU #27] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	36 56 56 56 56 56 56 56 
	95 41 41 41 41 41 41 41 
	53 27 27 27 27 27 27 27 
	02 4d 4d 4d 4d 4d 4d 4d 
	4a 5b 5b 5b 5b 5b 5b 5b 
	e7 f4 f4 f4 f4 f4 f4 f4 
	9b fe fe fe fe fe fe fe 
	b5 d4 d4 d4 d4 d4 d4 d4 

[MCU #27] Downsampling:
[Y]:
	36 56 56 56 56 56 56 56 
	95 41 41 41 41 41 41 41 
	53 27 27 27 27 27 27 27 
	02 4d 4d 4d 4d 4d 4d 4d 
	4a 5b 5b 5b 5b 5b 5b 5b 
	e7 f4 f4 f4 f4 f4 f4 f4 
	9b fe fe fe fe fe fe fe 
	b5 d4 d4 d4 d4 d4 d4 d4 

[MCU #27] DCT:
[Y]:
	001a ffe8 ffea ffec ffef fff3 fff7 fffc 
	fded 002a 0027 0023 001e 0017 0010 0008 
	00be 0002 0002 0001 0001 0001 0000 0000 
	00bc fff2 fff3 fff4 fff6 fff8 fffb fffe 
	ff63 ffe3 ffe5 ffe7 ffeb fff0 fff5 fffb 
	0033 ffcb ffce ffd3 ffda ffe2 ffec fff6 
	0020 000d 000c 000b 0009 0007 0005 0002 
	ff95 0000 0000 0000 0000 0000 0000 0000 

[MCU #27] ZZ:
[Y]:
	001a ffe8 fded 00be 002a ffea ffec 0027 
	0002 00bc ff63 fff2 0002 0023 ffef fff3 
	001e 0001 fff3 ffe3 0033 0020 ffcb ffe5 
	fff4 0001 0017 fff7 fffc 0010 0001 fff6 
	ffe7 ffce 000d ff95 0000 000c ffd3 ffeb 
	fff8 0000 0008 0000 fffb fff0 ffda 000b 
	0000 0000 0009 ffe2 fff5 fffe fffb ffec 
	0007 0000 0000 0005 fff6 0002 0000 0000 

[MCU #27] Quantification:
[Y]:
	0005 fff8 ff4f 0026 0006 ffff ffff 0002 
	0000 002f ffd9 fffe 0000 0002 0000 0000 
	0007 0000 fffe fffc 0004 0001 fffe ffff 
	fffd 0000 0003 ffff 0000 0000 0000 0000 
	fffb fff9 0001 fffa 0000 0000 ffff 0000 
	ffff 0000 0000 0000 0000 0000 ffff 0000 
	0000 0000 0000 ffff 0000 0000 0000 0000 
	0000 0000 0000 0000 0000 0000 0000 0000 

[MCU #27] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 13, magnitude = 4, index = 13
		bitstream => writing 5 over 3 bits
		bitstream => writing 13 over 4 bits

AC:
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = -177, magnitude = 8, index = 78
	RLE code = 8, huffman path = 1014, nb_bits = 10
		bitstream => writing 1014 over 10 bits
		bitstream => writing 78 over 8 bits
	value = 38, magnitude = 6, index = 38
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 38 over 6 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 47, magnitude = 6, index = 47
	RLE code = 22, huffman path = 65412, nb_bits = 16
		bitstream => writing 65412 over 16 bits
		bitstream => writing 47 over 6 bits
	value = -39, magnitude = 6, index = 24
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 24 over 6 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 7 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 67, huffman path = 65430, nb_bits = 16
		bitstream => writing 65430 over 16 bits
		bitstream => writing 2 over 3 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 81, huffman path = 122, nb_bits = 7
		bitstream => writing 122 over 7 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 65, huffman path = 59, nb_bits = 6
		bitstream => writing 59 over 6 bits
		bitstream => writing 0 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #28] Valeurs "niveaux de gris" initiales:
83 f1 81 b7 91 2c 7e 46    
45 2e 35 87 48 d0 90 cc    
ed c9 8a 78 4f 8b e7 3f    
7a 23 6b d6 e8 a6 41 36    
ac fb c6 2b 36 e3 03 61    
ee b6 19 55 2e ed d8 91    
98 bd 66 c2 d3 d3 1d 22    
9b 54 a8 c0 0e 41 72 e8    

[MCU #28] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	83 f1 81 b7 91 2c 7e 46 
	45 2e 35 87 48 d0 90 cc 
	ed c9 8a 78 4f 8b e7 3f 
	7a 23 6b d6 e8 a6 41 36 
	ac fb c6 2b 36 e3 03 61 
	ee b6 19 55 2e ed d8 91 
	98 bd 66 c2 d3 d3 1d 22 
	9b 54 a8 c0 0e 41 72 e8 

[MCU #28] Downsampling:
[Y]:
	83 f1 81 b7 91 2c 7e 46 
	45 2e 35 87 48 d0 90 cc 
	ed c9 8a 78 4f 8b e7 3f 
	7a 23 6b d6 e8 a6 41 36 
	ac fb c6 2b 36 e3 03 61 
	ee b6 19 55 2e ed d8 91 
	98 bd 66 c2 d3 d3 1d 22 
	9b 54 a8 c0 0e 41 72 e8 

[MCU #28] DCT:
[Y]:
	002f 0053 0015 004f ffea 0011 0014 ff82 
	ffee ffe3 ffe3 fffc ffeb 000e ffaf 002c 
	fff3 ffdd 000f ff78 0041 0026 ffb8 fffb 
	000c 0036 0023 0044 ffbc ff99 ffe1 ffcf 
	ffdb 0052 ffc4 ff7a 002c ffdc 0022 0028 
	001f 0066 ff47 004a 0044 fff7 ff97 0034 
	0039 0029 00b4 fffc ffc6 0066 ffa5 0022 
	0021 00b4 0019 ffee ff93 ffb2 fffe 000c 

[MCU #28] ZZ:
[Y]:
	002f 0053 ffee fff3 ffe3 0015 004f ffe3 
	ffdd 000c ffdb 0036 000f fffc ffea 0011 
	ffeb ff78 0023 0052 001f 0039 0066 ffc4 
	0044 0041 000e 0014 ff82 ffaf 0026 ffbc 
	ff7a ff47 0029 0021 00b4 00b4 004a 002c 
	ff99 ffb8 002c fffb ffe1 ffdc 0044 fffc 
	0019 ffee ffc6 fff7 0022 ffcf 0028 ff97 
	0066 ff93 ffb2 ffa5 0034 0022 fffe 000c 

[MCU #28] Quantification:
[Y]:
	0009 001b fffa fffe fffc 0001 0005 ffff 
	fff8 0003 fff7 0009 0001 0000 ffff 0001 
	fffb ffde 0007 000b 0002 0003 0004 fffd 
	0011 000d 0002 0002 fff8 fffd 0001 fffd 
	ffe6 ffe6 0003 0001 0009 0005 0002 0001 
	fff2 fffa 0002 0000 ffff ffff 0002 0000 
	0001 0000 fffe 0000 0001 ffff 0001 fffd 
	0004 fffd fffe fffd 0001 0001 0000 0000 

[MCU #28] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 4, magnitude = 3, index = 4
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits

AC:
	value = 27, magnitude = 5, index = 27
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 27 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -34, magnitude = 6, index = 29
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 29 over 6 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -26, magnitude = 5, index = 5
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 5 over 5 bits
	value = -26, magnitude = 5, index = 5
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 5 over 5 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #29] Valeurs "niveaux de gris" initiales:
35 0d 97 3c 2f 4b 67 6e    
e1 1a 06 c5 28 31 2b ed    
7b 35 d5 2d c7 98 15 e1    
b9 a9 ca d6 fe 27 7e cc    
92 d9 49 5e 29 55 95 4f    
9c 48 90 a7 65 8b 78 ae    
dd f3 1e 3a b6 d1 b0 cf    
27 6f 0c 54 04 ee e7 5b    

[MCU #29] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	35 0d 97 3c 2f 4b 67 6e 
	e1 1a 06 c5 28 31 2b ed 
	7b 35 d5 2d c7 98 15 e1 
	b9 a9 ca d6 fe 27 7e cc 
	92 d9 49 5e 29 55 95 4f 
	9c 48 90 a7 65 8b 78 ae 
	dd f3 1e 3a b6 d1 b0 cf 
	27 6f 0c 54 04 ee e7 5b 

[MCU #29] Downsampling:
[Y]:
	35 0d 97 3c 2f 4b 67 6e 
	e1 1a 06 c5 28 31 2b ed 
	7b 35 d5 2d c7 98 15 e1 
	b9 a9 ca d6 fe 27 7e cc 
	92 d9 49 5e 29 55 95 4f 
	9c 48 90 a7 65 8b 78 ae 
	dd f3 1e 3a b6 d1 b0 cf 
	27 6f 0c 54 04 ee e7 5b 

[MCU #29] DCT:
[Y]:
	ffe2 ffca 0074 fffe 0047 fffc 0025 ffe1 
	ffa2 002d ffdb ff76 009b 0010 0071 0057 
	ff78 ff80 0024 0047 ffb3 003a 0019 ffb3 
	ffca 002d 001b fff5 ffe5 003c ffe4 fff3 
	ffbb 000b ffd1 ffe2 ff71 0039 ff9a 000a 
	008d 0008 ffd0 fffc 0004 ff90 000b 0081 
	ffbf ffc1 ff96 ffcc ffa5 000b 0081 0044 
	ffcd 0004 002d 0045 ff84 ffa4 0008 000f 

[MCU #29] ZZ:
[Y]:
	ffe2 ffca ffa2 ff78 002d 0074 fffe ffdb 
	ff80 ffca ffbb 002d 0024 ff76 0047 fffc 
	009b 0047 001b 000b 008d ffbf 0008 ffd1 
	fff5 ffb3 0010 0025 ffe1 0071 003a ffe5 
	ffe2 ffd0 ffc1 ffcd 0004 ff96 fffc ff71 
	003c 0019 0057 ffb3 ffe4 0039 0004 ffcc 
	002d 0045 ffa5 ff90 ff9a fff3 000a 000b 
	000b ff84 ffa4 0081 0081 0044 0008 000f 

[MCU #29] Quantification:
[Y]:
	fffa ffee ffe1 ffe5 0006 0009 0000 fffe 
	ffe0 fff3 ffef 0007 0004 fff8 0003 0000 
	0026 0011 0005 0001 000b fffd 0000 fffe 
	fffe fff1 0002 0004 fffe 0004 0002 ffff 
	fffa fffa fffb fffd 0000 fffd 0000 fffa 
	0008 0002 0005 fffc ffff 0001 0000 ffff 
	0003 0003 fffd fffc fffd 0000 0000 0000 
	0000 fffc fffd 0004 0003 0002 0000 0000 

[MCU #29] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -15, magnitude = 4, index = 0
		bitstream => writing 5 over 3 bits
		bitstream => writing 0 over 4 bits

AC:
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = -31, magnitude = 5, index = 0
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 0 over 5 bits
	value = -27, magnitude = 5, index = 4
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 4 over 5 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -32, magnitude = 6, index = 31
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 31 over 6 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 38, magnitude = 6, index = 38
	RLE code = 22, huffman path = 65412, nb_bits = 16
		bitstream => writing 65412 over 16 bits
		bitstream => writing 38 over 6 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 1 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 67, huffman path = 65430, nb_bits = 16
		bitstream => writing 65430 over 16 bits
		bitstream => writing 3 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #30] Valeurs "niveaux de gris" initiales:
f9 3a d4 67 89 72 42 1a    
ed bc 30 f0 83 81 8a 86    
a4 cd 8a 7d 66 4e 5b c4    
d3 b1 81 be 5f 6b 7f 3a    
49 73 b6 73 0a c6 67 77    
bc 2c fa 4e 72 1f 2a 16    
b1 13 c0 23 13 fa 25 ba    
a2 4d d0 79 90 38 6f 0d    

[MCU #30] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	f9 3a d4 67 89 72 42 1a 
	ed bc 30 f0 83 81 8a 86 
	a4 cd 8a 7d 66 4e 5b c4 
	d3 b1 81 be 5f 6b 7f 3a 
	49 73 b6 73 0a c6 67 77 
	bc 2c fa 4e 72 1f 2a 16 
	b1 13 c0 23 13 fa 25 ba 
	a2 4d d0 79 90 38 6f 0d 

[MCU #30] Downsampling:
[Y]:
	f9 3a d4 67 89 72 42 1a 
	ed bc 30 f0 83 81 8a 86 
	a4 cd 8a 7d 66 4e 5b c4 
	d3 b1 81 be 5f 6b 7f 3a 
	49 73 b6 73 0a c6 67 77 
	bc 2c fa 4e 72 1f 2a 16 
	b1 13 c0 23 13 fa 25 ba 
	a2 4d d0 79 90 38 6f 0d 

[MCU #30] DCT:
[Y]:
	ffdb 00c2 0019 0004 0006 005b 0095 0015 
	0063 0026 001d 0024 004a fff5 ff80 ffb8 
	fffb 001d ffe3 003f 0037 001c 002e 0057 
	ffb5 000d ffdd 0013 ffdd 0023 0095 003e 
	ffec 0025 ffb3 0012 ffc4 0037 ffe4 0020 
	fff4 0008 0029 001a fffd fff4 006f 0018 
	ffc7 0061 ffd9 ffc5 000d fff3 ffe5 009c 
	fff4 ff8a 0037 ffd3 ffb6 ffbb 006d ffc5 

[MCU #30] ZZ:
[Y]:
	ffdb 00c2 0063 fffb 0026 0019 0004 001d 
	001d ffb5 ffec 000d ffe3 0024 0006 005b 
	004a 003f ffdd 0025 fff4 ffc7 0008 ffb3 
	0013 0037 fff5 0095 0015 ff80 001c ffdd 
	0012 0029 0061 fff4 ff8a ffd9 001a ffc4 
	0023 002e ffb8 0057 0095 0037 fffd ffc5 
	0037 ffd3 000d fff4 ffe4 003e 0020 006f 
	fff3 ffb6 ffbb ffe5 0018 009c 006d ffc5 

[MCU #30] Quantification:
[Y]:
	fff9 0040 0021 ffff 0005 0002 0000 0001 
	0007 ffee fffb 0002 fffd 0002 0000 0005 
	0012 000f fff9 0005 ffff fffd 0000 fffc 
	0004 000b ffff 0010 0001 fffc 0001 ffff 
	0003 0005 0008 0000 fffb ffff 0000 fffe 
	0005 0004 fffc 0004 0006 0001 0000 fffe 
	0003 fffe 0000 0000 0000 0001 0000 0003 
	0000 fffe fffe 0000 0000 0005 0003 ffff 

[MCU #30] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -1, magnitude = 1, index = 0
		bitstream => writing 2 over 3 bits
		bitstream => writing 0 over 1 bits

AC:
	value = 64, magnitude = 7, index = 64
	RLE code = 7, huffman path = 248, nb_bits = 8
		bitstream => writing 248 over 8 bits
		bitstream => writing 64 over 7 bits
	value = 33, magnitude = 6, index = 33
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 33 over 6 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 5 over 3 bits
	value = 18, magnitude = 5, index = 18
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 18 over 5 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 49, huffman path = 58, nb_bits = 6
		bitstream => writing 58 over 6 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 5 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
[MCU #31] Valeurs "niveaux de gris" initiales:
9b 09 84 10 8a 39 e4 0d    
01 6f f0 ef 4d 95 b2 92    
3a 6b 4e 13 68 94 1d 55    
1c d8 2b af d5 e8 cc 50    
d4 82 63 af 70 ff 0a 1d    
6d 5b 4f 0a d5 fc 5d c3    
99 b2 d9 e6 fc 24 2d 95    
57 35 3a 45 ad 7b f3 48    

[MCU #31] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	9b 09 84 10 8a 39 e4 0d 
	01 6f f0 ef 4d 95 b2 92 
	3a 6b 4e 13 68 94 1d 55 
	1c d8 2b af d5 e8 cc 50 
	d4 82 63 af 70 ff 0a 1d 
	6d 5b 4f 0a d5 fc 5d c3 
	99 b2 d9 e6 fc 24 2d 95 
	57 35 3a 45 ad 7b f3 48 

[MCU #31] Downsampling:
[Y]:
	9b 09 84 10 8a 39 e4 0d 
	01 6f f0 ef 4d 95 b2 92 
	3a 6b 4e 13 68 94 1d 55 
	1c d8 2b af d5 e8 cc 50 
	d4 82 63 af 70 ff 0a 1d 
	6d 5b 4f 0a d5 fc 5d c3 
	99 b2 d9 e6 fc 24 2d 95 
	57 35 3a 45 ad 7b f3 48 

[MCU #31] DCT:
[Y]:
	ffdd ffc8 ff85 0060 ffd6 ffdd 0001 001d 
	ffb6 fff2 0003 ffd1 ff9c 0053 0007 0002 
	ffd2 ffe1 0027 ffa5 0009 0088 ffcc 00c4 
	0028 0033 0021 002e 0037 0009 005e 0030 
	ffe3 fffb 0007 00a2 ffd4 0069 ffab 000f 
	0012 0027 fffb fffe 0031 ffbf ffa2 0051 
	ff61 ff99 0075 00a8 ffe3 ffbf 0033 004f 
	ffae 00b8 0011 0006 004a 000e 0052 ffff 

[MCU #31] ZZ:
[Y]:
	ffdd ffc8 ffb6 ffd2 fff2 ff85 0060 0003 
	ffe1 0028 ffe3 0033 0027 ffd1 ffd6 ffdd 
	ff9c ffa5 0021 fffb 0012 ff61 0027 0007 
	002e 0009 0053 0001 001d 0007 0088 0037 
	00a2 fffb ff99 ffae 00b8 0075 fffe ffd4 
	0009 ffcc 0002 00c4 005e 0069 0031 00a8 
	0011 0006 ffe3 ffbf ffab 0030 000f ffa2 
	ffbf 004a 000e 0033 0051 004f 0052 ffff 

[MCU #31] Quantification:
[Y]:
	fff9 ffee ffe8 fff7 fffe fff6 0006 0000 
	fff9 000a fff9 0008 0004 fffe fffe fffe 
	ffe7 ffea 0006 0000 0001 fff7 0001 0000 
	000b 0001 000b 0000 0001 0000 0005 0002 
	0020 0000 fff7 fffc 0009 0003 0000 ffff 
	0001 fffc 0000 000a 0003 0003 0001 0006 
	0001 0000 ffff fffe fffe 0001 0000 fffd 
	fffe 0002 0000 0001 0002 0002 0002 0000 

[MCU #31] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 0, magnitude = 0, index = 0
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 0 bits

AC:
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = -24, magnitude = 5, index = 7
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 7 over 5 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 0 over 3 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -25, magnitude = 5, index = 6
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 6 over 5 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 11 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 5 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 32, magnitude = 6, index = 32
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 32 over 6 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 6 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 10 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #32] Valeurs "niveaux de gris" initiales:
2b 65 c5 bc 91 43 03 c6    
c3 e7 19 0c b8 a9 d8 99    
5d a7 cd ac 33 b5 eb ae    
0c 37 26 f4 dd 67 2a 97    
fb d1 48 31 b4 4c 92 46    
b2 76 19 e0 63 f1 71 00    
e1 93 57 b4 66 75 d7 43    
cf 9c 08 dd dd 7b c5 05    

[MCU #32] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	2b 65 c5 bc 91 43 03 c6 
	c3 e7 19 0c b8 a9 d8 99 
	5d a7 cd ac 33 b5 eb ae 
	0c 37 26 f4 dd 67 2a 97 
	fb d1 48 31 b4 4c 92 46 
	b2 76 19 e0 63 f1 71 00 
	e1 93 57 b4 66 75 d7 43 
	cf 9c 08 dd dd 7b c5 05 

[MCU #32] Downsampling:
[Y]:
	2b 65 c5 bc 91 43 03 c6 
	c3 e7 19 0c b8 a9 d8 99 
	5d a7 cd ac 33 b5 eb ae 
	0c 37 26 f4 dd 67 2a 97 
	fb d1 48 31 b4 4c 92 46 
	b2 76 19 e0 63 f1 71 00 
	e1 93 57 b4 66 75 d7 43 
	cf 9c 08 dd dd 7b c5 05 

[MCU #32] DCT:
[Y]:
	0033 001f ffdd 0078 0035 0021 ff7c ffbf 
	fffa ff9f 0022 ff43 ffe5 ff70 0063 0023 
	001d 0014 0006 fff4 0003 000f fff0 0013 
	ffc4 0053 0004 0010 001b ffe7 0044 fff1 
	ffb5 0017 ff94 ffb9 0095 ffac fff4 0033 
	ffd4 ffc7 ff7f ff3d 003d 0035 0052 ffc7 
	0002 fffa ff95 ffb6 ffdb 0045 0049 ffa6 
	003e 0043 0080 ffbc ffa4 0025 0009 0057 

[MCU #32] ZZ:
[Y]:
	0033 001f fffa 001d ff9f ffdd 0078 0022 
	0014 ffc4 ffb5 0053 0006 ff43 0035 0021 
	ffe5 fff4 0004 0017 ffd4 0002 ffc7 ff94 
	0010 0003 ff70 ff7c ffbf 0063 000f 001b 
	ffb9 ff7f fffa 003e 0043 ff95 ff3d 0095 
	ffe7 fff0 0023 0013 0044 ffac 003d ffb6 
	0080 ffbc ffdb 0035 fff4 fff1 0033 0052 
	0045 ffa4 0025 0049 ffc7 ffa6 0009 0057 

[MCU #32] Quantification:
[Y]:
	000a 000a fffe 0005 fff3 fffe 0008 0001 
	0005 fff1 ffee 000d 0000 fff5 0002 0001 
	fffa fffd 0000 0003 fffd 0000 fffe fffa 
	0004 0000 ffec fff2 fffc 0003 0000 0001 
	fff2 ffee 0000 0003 0003 fffd fffa 0006 
	fffd ffff 0002 0001 0002 fffe 0001 fffe 
	0008 fffd ffff 0002 0000 0000 0001 0002 
	0003 fffd 0001 0002 ffff fffd 0000 0002 

[MCU #32] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 17, magnitude = 5, index = 17
		bitstream => writing 6 over 3 bits
		bitstream => writing 17 over 5 bits

AC:
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 4 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -20, magnitude = 5, index = 11
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 11 over 5 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
[MCU #33] Valeurs "niveaux de gris" initiales:
50 9a 03 80 e5 6a ee de    
c4 de 5e ec 0f 89 d9 fd    
ea c0 db b1 59 f0 92 fd    
10 f4 6d 0e 1b eb da ee    
25 db a4 4e 31 39 9d 7a    
39 02 a7 9f 8d 1f 4d 4a    
68 f5 7d 1e c6 2d ee 78    
ea d2 59 ee c0 41 49 62    

[MCU #33] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	50 9a 03 80 e5 6a ee de 
	c4 de 5e ec 0f 89 d9 fd 
	ea c0 db b1 59 f0 92 fd 
	10 f4 6d 0e 1b eb da ee 
	25 db a4 4e 31 39 9d 7a 
	39 02 a7 9f 8d 1f 4d 4a 
	68 f5 7d 1e c6 2d ee 78 
	ea d2 59 ee c0 41 49 62 

[MCU #33] Downsampling:
[Y]:
	50 9a 03 80 e5 6a ee de 
	c4 de 5e ec 0f 89 d9 fd 
	ea c0 db b1 59 f0 92 fd 
	10 f4 6d 0e 1b eb da ee 
	25 db a4 4e 31 39 9d 7a 
	39 02 a7 9f 8d 1f 4d 4a 
	68 f5 7d 1e c6 2d ee 78 
	ea d2 59 ee c0 41 49 62 

[MCU #33] DCT:
[Y]:
	006e ffd3 0078 ffa9 ffce ffd5 ff7a ffd9 
	007a ff66 0070 fffe ffeb 0012 001f ff88 
	004b 002d ffe0 0058 00c2 0012 ff82 0012 
	ff4a ffb2 ffa0 ffe0 0015 0008 ffaa 0085 
	ffd0 ffd5 0002 001b ffde ffab ffb4 ffe8 
	000b ff7e 001b 0044 ffa4 ff93 ffe1 0059 
	fff6 0021 ff81 0012 0086 0028 007a 0013 
	003a 0038 0015 0001 ffea ffe0 ffe8 0038 

[MCU #33] ZZ:
[Y]:
	006e ffd3 007a 004b ff66 0078 ffa9 0070 
	002d ff4a ffd0 ffb2 ffe0 fffe ffce ffd5 
	ffeb 0058 ffa0 ffd5 000b fff6 ff7e 0002 
	ffe0 00c2 0012 ff7a ffd9 001f 0012 0015 
	001b 001b 0021 003a 0038 ff81 0044 ffde 
	0008 ff82 ff88 0012 ffaa ffab ffa4 0012 
	0015 0001 0086 ff93 ffb4 0085 ffe8 ffe1 
	0028 ffea ffe0 007a 0059 0013 ffe8 0038 

[MCU #33] Quantification:
[Y]:
	0016 fff1 0028 000f ffea 000a fffb 0006 
	000b ffd3 fff4 fff3 fffc 0000 fffe fffe 
	fffb 0016 ffed fffa 0000 0000 fffa 0000 
	fff8 0026 0002 fff2 fffe 0001 0000 0001 
	0005 0003 0003 0003 0002 fffd 0002 ffff 
	0001 fff5 fff9 0000 fffd fffe fffe 0000 
	0001 0000 0005 fffc fffe 0003 0000 ffff 
	0001 0000 ffff 0004 0002 0000 0000 0001 

[MCU #33] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 12, magnitude = 4, index = 12
		bitstream => writing 5 over 3 bits
		bitstream => writing 12 over 4 bits

AC:
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = 40, magnitude = 6, index = 40
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 40 over 6 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -45, magnitude = 6, index = 18
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 18 over 6 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 22, magnitude = 5, index = 22
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 22 over 5 bits
	value = -19, magnitude = 5, index = 12
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 12 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 1 over 3 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 7 over 4 bits
	value = 38, magnitude = 6, index = 38
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 38 over 6 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 5 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
[MCU #34] Valeurs "niveaux de gris" initiales:
a5 c3 c3 c3 c3 c3 c3 c3    
46 09 09 09 09 09 09 09    
bd 1d 1d 1d 1d 1d 1d 1d    
9c 5b 5b 5b 5b 5b 5b 5b    
ac 53 53 53 53 53 53 53    
4b 47 47 47 47 47 47 47    
40 ae ae ae ae ae ae ae    
8e 1a 1a 1a 1a 1a 1a 1a    

[MCU #34] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	a5 c3 c3 c3 c3 c3 c3 c3 
	46 09 09 09 09 09 09 09 
	bd 1d 1d 1d 1d 1d 1d 1d 
	9c 5b 5b 5b 5b 5b 5b 5b 
	ac 53 53 53 53 53 53 53 
	4b 47 47 47 47 47 47 47 
	40 ae ae ae ae ae ae ae 
	8e 1a 1a 1a 1a 1a 1a 1a 

[MCU #34] Downsampling:
[Y]:
	a5 c3 c3 c3 c3 c3 c3 c3 
	46 09 09 09 09 09 09 09 
	bd 1d 1d 1d 1d 1d 1d 1d 
	9c 5b 5b 5b 5b 5b 5b 5b 
	ac 53 53 53 53 53 53 53 
	4b 47 47 47 47 47 47 47 
	40 ae ae ae ae ae ae ae 
	8e 1a 1a 1a 1a 1a 1a 1a 

[MCU #34] DCT:
[Y]:
	fed3 003d 0039 0034 002c 0022 0018 000c 
	0017 0013 0012 0010 000e 000b 0007 0003 
	0050 ffdd ffdf ffe2 ffe7 ffec fff3 fff9 
	00f4 ffb8 ffbc ffc3 ffcc ffd8 ffe4 fff2 
	007f 0015 0014 0012 000f 000c 0008 0004 
	013d ffc6 ffc9 ffcf ffd6 ffdf ffea fff5 
	ffcc 0029 0027 0023 001e 0017 0010 0008 
	0079 0007 0006 0006 0005 0004 0002 0001 

[MCU #34] ZZ:
[Y]:
	fed3 003d 0017 0050 0013 0039 0034 0012 
	ffdd 00f4 007f ffb8 ffdf 0010 002c 0022 
	000e ffe2 ffbc 0015 013d ffcc ffc6 0014 
	ffc3 ffe7 000b 0018 000c 0007 ffec ffcc 
	0012 ffc9 0029 0079 0007 0027 ffcf 000f 
	ffd8 fff3 0003 fff9 ffe4 000c ffd6 0023 
	0006 0006 001e ffdf 0008 fff2 0004 ffea 
	0017 0005 0004 0010 fff5 0008 0002 0001 

[MCU #34] Quantification:
[Y]:
	ffc4 0014 0007 0010 0002 0004 0003 0001 
	fff8 003d 001f fff4 fffc 0000 0002 0002 
	0003 fff9 fff3 0003 001a fffd fffe 0001 
	fff1 fffb 0001 0002 0000 0000 0000 fffe 
	0003 fff9 0003 0007 0000 0001 ffff 0000 
	fffb ffff 0000 0000 ffff 0000 ffff 0001 
	0000 0000 0001 ffff 0000 0000 0000 0000 
	0001 0000 0000 0000 0000 0000 0000 0000 

[MCU #34] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -82, magnitude = 7, index = 45
		bitstream => writing 30 over 5 bits
		bitstream => writing 45 over 7 bits

AC:
	value = 20, magnitude = 5, index = 20
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 20 over 5 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 61, magnitude = 6, index = 61
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 61 over 6 bits
	value = 31, magnitude = 5, index = 31
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 31 over 5 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 26, magnitude = 5, index = 26
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 26 over 5 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 65, huffman path = 59, nb_bits = 6
		bitstream => writing 59 over 6 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #35] Valeurs "niveaux de gris" initiales:
dc 1f 52 4b 2c a9 80 67    
b1 3c f1 d7 f6 c3 bd f1    
38 5e c1 8a 4e fe ab be    
ab 4e de 11 53 c5 84 fa    
32 24 04 8e 74 3d 09 07    
1b da 96 ca c4 56 90 60    
49 00 09 28 d1 49 64 a1    
18 f8 52 00 59 f6 4e 09    

[MCU #35] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	dc 1f 52 4b 2c a9 80 67 
	b1 3c f1 d7 f6 c3 bd f1 
	38 5e c1 8a 4e fe ab be 
	ab 4e de 11 53 c5 84 fa 
	32 24 04 8e 74 3d 09 07 
	1b da 96 ca c4 56 90 60 
	49 00 09 28 d1 49 64 a1 
	18 f8 52 00 59 f6 4e 09 

[MCU #35] Downsampling:
[Y]:
	dc 1f 52 4b 2c a9 80 67 
	b1 3c f1 d7 f6 c3 bd f1 
	38 5e c1 8a 4e fe ab be 
	ab 4e de 11 53 c5 84 fa 
	32 24 04 8e 74 3d 09 07 
	1b da 96 ca c4 56 90 60 
	49 00 09 28 d1 49 64 a1 
	18 f8 52 00 59 f6 4e 09 

[MCU #35] DCT:
[Y]:
	ffc6 ff93 ffd6 002a ffe3 ffdb 0057 0005 
	00af ffdb 0047 ffe2 0036 009f 009b 0014 
	0004 0009 001e 0068 ffd7 fff4 fff7 fffa 
	ff9c 0043 ffcf 0005 0093 0037 ff87 0015 
	ff5c 005d 0056 0063 ffb9 fff9 0036 ffc7 
	ffd9 ffb6 0093 0011 0015 000c 004e 0036 
	000e 003a ffea ffe7 ff52 fff5 ffcd ff97 
	ff35 ffe5 ffd7 0040 003a 0023 ffe8 ffcb 

[MCU #35] ZZ:
[Y]:
	ffc6 ff93 00af 0004 ffdb ffd6 002a 0047 
	0009 ff9c ff5c 0043 001e ffe2 ffe3 ffdb 
	0036 0068 ffcf 005d ffd9 000e ffb6 0056 
	0005 ffd7 009f 0057 0005 009b fff4 0093 
	0063 0093 003a ff35 ffe5 ffea 0011 ffb9 
	0037 fff7 0014 fffa ff87 fff9 0015 ffe7 
	ffd7 0040 ff52 000c 0036 0015 ffc7 004e 
	fff5 003a 0023 ffcd 0036 ff97 ffe8 ffcb 

[MCU #35] Quantification:
[Y]:
	fff5 ffdc 003a 0000 fffb fffd 0002 0003 
	0002 ffe7 ffd7 000b 0003 ffff ffff fffe 
	000d 001a fff7 000d fffd 0000 fffd 0005 
	0001 fff8 0016 0009 0000 0005 0000 0007 
	0013 0015 0005 fff5 ffff 0000 0000 fffd 
	0007 0000 0001 0000 fffb 0000 0000 0000 
	fffe 0003 fff9 0000 0001 0000 ffff 0002 
	0000 0002 0001 ffff 0001 fffd 0000 ffff 

[MCU #35] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 49, magnitude = 6, index = 49
		bitstream => writing 14 over 4 bits
		bitstream => writing 49 over 6 bits

AC:
	value = -36, magnitude = 6, index = 27
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 27 over 6 bits
	value = 58, magnitude = 6, index = 58
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 58 over 6 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -25, magnitude = 5, index = 6
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 6 over 5 bits
	value = -41, magnitude = 6, index = 22
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 22 over 6 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = 26, magnitude = 5, index = 26
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 26 over 5 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 22, magnitude = 5, index = 22
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 22 over 5 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 5 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 7 over 3 bits
	value = 19, magnitude = 5, index = 19
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 19 over 5 bits
	value = 21, magnitude = 5, index = 21
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 21 over 5 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 0 over 2 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
[MCU #36] Valeurs "niveaux de gris" initiales:
ee 2e e2 e2 76 b1 7e 7f    
df 06 7a 14 2a 23 9c 9a    
4e 29 0a ab 59 91 fa 61    
3b fa 11 ca a9 87 1b e1    
3d b1 ea 2a 04 1b f6 68    
83 b9 19 e3 15 f5 48 00    
9b 9d f9 4e f1 2b 98 10    
17 48 f0 aa 8a d8 45 f5    

[MCU #36] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	ee 2e e2 e2 76 b1 7e 7f 
	df 06 7a 14 2a 23 9c 9a 
	4e 29 0a ab 59 91 fa 61 
	3b fa 11 ca a9 87 1b e1 
	3d b1 ea 2a 04 1b f6 68 
	83 b9 19 e3 15 f5 48 00 
	9b 9d f9 4e f1 2b 98 10 
	17 48 f0 aa 8a d8 45 f5 

[MCU #36] Downsampling:
[Y]:
	ee 2e e2 e2 76 b1 7e 7f 
	df 06 7a 14 2a 23 9c 9a 
	4e 29 0a ab 59 91 fa 61 
	3b fa 11 ca a9 87 1b e1 
	3d b1 ea 2a 04 1b f6 68 
	83 b9 19 e3 15 f5 48 00 
	9b 9d f9 4e f1 2b 98 10 
	17 48 f0 aa 8a d8 45 f5 

[MCU #36] DCT:
[Y]:
	fff1 fffd fff5 ffd6 ffdd 004e 0011 ffe9 
	ffe7 ffdc 006f 0036 0062 007c 0006 0005 
	0052 0009 ffc9 fffd 0046 003d 00c3 0073 
	000d 00af 0004 002a ffb3 0052 0010 ffff 
	0064 ffda ffed ff66 0002 ffa2 0045 ffd9 
	005f 0042 ff7f 003a 0052 ffac ffbb ffe4 
	0016 ffae ff98 004b fffd 0046 0011 ff15 
	0000 ffec 000d ffd2 ff8a 0079 ffd5 00cf 

[MCU #36] ZZ:
[Y]:
	fff1 fffd ffe7 0052 ffdc fff5 ffd6 006f 
	0009 000d 0064 00af ffc9 0036 ffdd 004e 
	0062 fffd 0004 ffda 005f 0016 0042 ffed 
	002a 0046 007c 0011 ffe9 0006 003d ffb3 
	ff66 ff7f ffae 0000 ffec ff98 003a 0002 
	0052 00c3 0005 0073 0010 ffa2 0052 004b 
	000d ffd2 fffd ffac 0045 ffff ffd9 ffbb 
	0046 ff8a 0079 0011 ffe4 ff15 ffd5 00cf 

[MCU #36] Quantification:
[Y]:
	fffd ffff fff8 0010 fffb 0000 fffe 0006 
	0002 0003 0019 001d fffa 0003 ffff 0004 
	0018 0000 0000 fffb 0007 0001 0003 ffff 
	000a 000e 0011 0001 ffff 0000 0002 fffc 
	ffe2 ffee fff9 0000 ffff fffd 0001 0000 
	000b 0011 0000 0006 0000 fffd 0002 0002 
	0000 fffe 0000 fffd 0002 0000 ffff fffe 
	0003 fffc 0004 0000 0000 fff9 ffff 0006 

[MCU #36] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 8, magnitude = 4, index = 8
		bitstream => writing 5 over 3 bits
		bitstream => writing 8 over 4 bits

AC:
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 25, magnitude = 5, index = 25
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 25 over 5 bits
	value = 29, magnitude = 5, index = 29
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 29 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 24, magnitude = 5, index = 24
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 24 over 5 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 2 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -30, magnitude = 5, index = 1
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 1 over 5 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 11 over 4 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 6 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 0 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
[MCU #37] Valeurs "niveaux de gris" initiales:
8e 5b fa 54 60 e4 26 ba    
f8 ce 8a 34 ee a8 52 f0    
0f 0d 26 7d fe f1 66 04    
4c 6a c5 cf 07 d2 5c 50    
a0 87 51 1e 53 34 ae ea    
46 e9 f3 9d c8 98 df d1    
21 37 be 78 5a 26 e8 61    
90 2a c3 ea aa 2f 3d 79    

[MCU #37] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	8e 5b fa 54 60 e4 26 ba 
	f8 ce 8a 34 ee a8 52 f0 
	0f 0d 26 7d fe f1 66 04 
	4c 6a c5 cf 07 d2 5c 50 
	a0 87 51 1e 53 34 ae ea 
	46 e9 f3 9d c8 98 df d1 
	21 37 be 78 5a 26 e8 61 
	90 2a c3 ea aa 2f 3d 79 

[MCU #37] Downsampling:
[Y]:
	8e 5b fa 54 60 e4 26 ba 
	f8 ce 8a 34 ee a8 52 f0 
	0f 0d 26 7d fe f1 66 04 
	4c 6a c5 cf 07 d2 5c 50 
	a0 87 51 1e 53 34 ae ea 
	46 e9 f3 9d c8 98 df d1 
	21 37 be 78 5a 26 e8 61 
	90 2a c3 ea aa 2f 3d 79 

[MCU #37] DCT:
[Y]:
	002d ffcc ffcb ffc6 ffee ffee 0059 0035 
	001a 0005 0015 0096 fff7 ff7f 0088 ffc0 
	001d 003d ffe1 ffe1 004f fff6 0055 003f 
	0072 ffee 00b0 ff97 ffad ffc8 ffff 002f 
	ffc8 0046 003b ffb6 0020 0043 0070 ffb4 
	ff9d ffe0 ff72 ffd1 ff74 0081 0032 ffca 
	0016 ffdd ff5a 0024 fff7 ffe8 000d ffea 
	ff67 ffa9 0012 004b 0022 0014 ffd4 0042 

[MCU #37] ZZ:
[Y]:
	002d ffcc 001a 001d 0005 ffcb ffc6 0015 
	003d 0072 ffc8 ffee ffe1 0096 ffee ffee 
	fff7 ffe1 00b0 0046 ff9d 0016 ffe0 003b 
	ff97 004f ff7f 0059 0035 0088 fff6 ffad 
	ffb6 ff72 ffdd ff67 ffa9 ff5a ffd1 0020 
	ffc8 0055 ffc0 003f ffff 0043 ff74 0024 
	0012 004b fff7 0081 0070 002f ffb4 0032 
	ffe8 0022 0014 000d ffca ffea ffd4 0042 

[MCU #37] Quantification:
[Y]:
	0009 ffef 0008 0005 0000 fffc fffd 0001 
	000f 001c fff2 fffd fffd 0008 ffff ffff 
	fffe fff9 0023 000a fff8 0001 ffff 0003 
	ffe6 000f ffee 0009 0003 0005 0000 fffc 
	fff2 ffec fffd fff7 fffc fffb ffff 0001 
	fff8 0007 fffd 0003 0000 0002 fffc 0001 
	0001 0003 0000 0004 0003 0001 fffe 0001 
	ffff 0001 0000 0000 ffff 0000 ffff 0002 

[MCU #37] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 12, magnitude = 4, index = 12
		bitstream => writing 5 over 3 bits
		bitstream => writing 12 over 4 bits

AC:
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = 28, magnitude = 5, index = 28
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 28 over 5 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = 35, magnitude = 6, index = 35
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 35 over 6 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -26, magnitude = 5, index = 5
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 5 over 5 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -20, magnitude = 5, index = 11
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 11 over 5 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
[MCU #38] Valeurs "niveaux de gris" initiales:
d2 e6 fb 1b 48 89 35 24    
3c 21 70 50 7e 4b 5d 30    
e6 72 a7 76 76 17 8f ae    
38 7a 93 00 a8 e3 ed 53    
c0 c6 9c 2d 29 b8 60 5c    
40 3c d0 51 39 57 b3 54    
a4 4e af 21 f9 e7 92 42    
8c bb df f9 5b 7d 24 73    

[MCU #38] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	d2 e6 fb 1b 48 89 35 24 
	3c 21 70 50 7e 4b 5d 30 
	e6 72 a7 76 76 17 8f ae 
	38 7a 93 00 a8 e3 ed 53 
	c0 c6 9c 2d 29 b8 60 5c 
	40 3c d0 51 39 57 b3 54 
	a4 4e af 21 f9 e7 92 42 
	8c bb df f9 5b 7d 24 73 

[MCU #38] Downsampling:
[Y]:
	d2 e6 fb 1b 48 89 35 24 
	3c 21 70 50 7e 4b 5d 30 
	e6 72 a7 76 76 17 8f ae 
	38 7a 93 00 a8 e3 ed 53 
	c0 c6 9c 2d 29 b8 60 5c 
	40 3c d0 51 39 57 b3 54 
	a4 4e af 21 f9 e7 92 42 
	8c bb df f9 5b 7d 24 73 

[MCU #38] DCT:
[Y]:
	ffdc 0066 0006 001b ff6f 0003 0066 0070 
	ffb6 0027 0048 0008 fffb fff2 ffea 002c 
	000d 0087 ffb4 ffcd 003b ffed 0025 ffde 
	ffca 0028 001a 0025 ff8c fff5 0032 0014 
	0044 0065 001d 0004 ff9a ffbd 0017 ff96 
	0059 ffcd ffff 0070 ffc1 ffd3 000e 0069 
	001f 0059 004c ff65 0024 0041 fff2 ffe5 
	004e 0080 0062 0021 0045 ffe3 0026 ffe6 

[MCU #38] ZZ:
[Y]:
	ffdc 0066 ffb6 000d 0027 0006 001b 0048 
	0087 ffca 0044 0028 ffb4 0008 ff6f 0003 
	fffb ffcd 001a 0065 0059 001f ffcd 001d 
	0025 003b fff2 0066 0070 ffea ffed ff8c 
	0004 ffff 0059 004e 0080 004c 0070 ff9a 
	fff5 0025 002c ffde 0032 ffbd ffc1 ff65 
	0062 0021 0024 ffd3 0017 0014 ff96 000e 
	0041 0045 ffe3 fff2 0069 ffe5 0026 ffe6 

[MCU #38] Quantification:
[Y]:
	fff9 0022 ffe8 0002 0005 0000 0001 0004 
	0021 fff3 0011 0006 fff7 0000 fff8 0000 
	ffff fff4 0005 000e 0007 0001 fffe 0001 
	0009 000b fffe 000b 0007 0000 0000 fffa 
	0000 0000 0008 0004 0006 0002 0003 fffc 
	ffff 0003 0002 ffff 0002 fffe ffff fffb 
	0006 0001 0001 ffff 0000 0000 fffe 0000 
	0002 0002 ffff 0000 0003 0000 0001 0000 

[MCU #38] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -16, magnitude = 5, index = 15
		bitstream => writing 6 over 3 bits
		bitstream => writing 15 over 5 bits

AC:
	value = 34, magnitude = 6, index = 34
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 34 over 6 bits
	value = -24, magnitude = 5, index = 7
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 7 over 5 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 33, magnitude = 6, index = 33
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 33 over 6 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 7 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 1 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 36, huffman path = 4084, nb_bits = 12
		bitstream => writing 4084 over 12 bits
		bitstream => writing 8 over 4 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #39] Valeurs "niveaux de gris" initiales:
a8 88 6f d5 31 f0 3c 20    
87 4f 07 7d 12 c5 6e f1    
76 51 38 c4 4f e3 83 9d    
31 cc 64 84 91 e8 7e cc    
dc 64 ea 50 a1 f3 57 de    
32 49 1e f6 9f ae 57 23    
e7 9b 6a b8 e5 ce 5a 80    
76 76 73 cf 6c c2 d8 84    

[MCU #39] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	a8 88 6f d5 31 f0 3c 20 
	87 4f 07 7d 12 c5 6e f1 
	76 51 38 c4 4f e3 83 9d 
	31 cc 64 84 91 e8 7e cc 
	dc 64 ea 50 a1 f3 57 de 
	32 49 1e f6 9f ae 57 23 
	e7 9b 6a b8 e5 ce 5a 80 
	76 76 73 cf 6c c2 d8 84 

[MCU #39] Downsampling:
[Y]:
	a8 88 6f d5 31 f0 3c 20 
	87 4f 07 7d 12 c5 6e f1 
	76 51 38 c4 4f e3 83 9d 
	31 cc 64 84 91 e8 7e cc 
	dc 64 ea 50 a1 f3 57 de 
	32 49 1e f6 9f ae 57 23 
	e7 9b 6a b8 e5 ce 5a 80 
	76 76 73 cf 6c c2 d8 84 

[MCU #39] DCT:
[Y]:
	0058 ffad ffc8 0070 001e 0012 005e ff23 
	ffae fff1 004d fff4 ffe6 0005 0039 ff99 
	ffe3 0039 fffb 0021 0002 006c ffd2 ffc8 
	ffe0 0073 ffac 002b 001d fffd 002c 0011 
	004d 0022 000f ffd9 ff9d ffe9 0031 002c 
	0024 004d ffab 0026 fff7 ffce ffc7 ffe9 
	ffb3 0000 ff7e 0000 ffe3 0062 ffc2 ffcc 
	0059 0049 0028 0022 0018 0013 0074 0045 

[MCU #39] ZZ:
[Y]:
	0058 ffad ffae ffe3 fff1 ffc8 0070 004d 
	0039 ffe0 004d 0073 fffb fff4 001e 0012 
	ffe6 0021 ffac 0022 0024 ffb3 004d 000f 
	002b 0002 0005 005e ff23 0039 006c 001d 
	ffd9 ffab 0000 0059 0049 ff7e 0026 ff9d 
	fffd ffd2 ff99 ffc8 002c ffe9 fff7 0000 
	0028 0022 ffe3 ffce 0031 0011 002c ffc7 
	0062 0018 0013 ffc2 ffe9 ffcc 0074 0045 

[MCU #39] Quantification:
[Y]:
	0011 ffe5 ffe5 fffb fffe fffc 0007 0004 
	000e fff8 0013 0013 0000 0000 0001 0001 
	fffa 0008 fff0 0004 0003 fffc 0003 0000 
	000a 0000 0000 000a fff2 0002 0004 0001 
	fff9 fff4 0000 0005 0003 fffd 0001 fffc 
	0000 fffc fffa fffe 0001 0000 0000 0000 
	0002 0001 ffff ffff 0001 0000 0001 ffff 
	0004 0000 0000 fffe 0000 ffff 0003 0002 

[MCU #39] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 24, magnitude = 5, index = 24
		bitstream => writing 6 over 3 bits
		bitstream => writing 24 over 5 bits

AC:
	value = -27, magnitude = 5, index = 4
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 4 over 5 bits
	value = -27, magnitude = 5, index = 4
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 4 over 5 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 19, magnitude = 5, index = 19
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 19 over 5 bits
	value = 19, magnitude = 5, index = 19
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 19 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -16, magnitude = 5, index = 15
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 15 over 5 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 10 over 4 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 36, huffman path = 4084, nb_bits = 12
		bitstream => writing 4084 over 12 bits
		bitstream => writing 10 over 4 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 5 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 3 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
[MCU #40] Valeurs "niveaux de gris" initiales:
1e 1e 02 94 cf 80 13 5d    
cb e9 06 f5 0c a2 8f 04    
0d 8d 48 66 1e 43 c7 2d    
e3 90 96 8c 17 b2 6d 63    
a4 41 09 a8 5d ff 11 fd    
68 70 06 7d 65 4e 7d ab    
6b 53 ce 5d 7e 66 6d 9f    
0a c9 2e 94 a1 73 89 31    

[MCU #40] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	1e 1e 02 94 cf 80 13 5d 
	cb e9 06 f5 0c a2 8f 04 
	0d 8d 48 66 1e 43 c7 2d 
	e3 90 96 8c 17 b2 6d 63 
	a4 41 09 a8 5d ff 11 fd 
	68 70 06 7d 65 4e 7d ab 
	6b 53 ce 5d 7e 66 6d 9f 
	0a c9 2e 94 a1 73 89 31 

[MCU #40] Downsampling:
[Y]:
	1e 1e 02 94 cf 80 13 5d 
	cb e9 06 f5 0c a2 8f 04 
	0d 8d 48 66 1e 43 c7 2d 
	e3 90 96 8c 17 b2 6d 63 
	a4 41 09 a8 5d ff 11 fd 
	68 70 06 7d 65 4e 7d ab 
	6b 53 ce 5d 7e 66 6d 9f 
	0a c9 2e 94 a1 73 89 31 

[MCU #40] DCT:
[Y]:
	ff78 ffe9 fff5 0035 0019 000d ffc5 ff53 
	ffd2 0030 ffe9 0043 0004 0040 ffe5 ffb0 
	ffc5 0001 ff6d 0000 fff6 ffca ff86 003a 
	fff7 ffa4 ffff 0017 00bc ffba 0067 fff7 
	0010 ffdd ffc1 0037 004c ffb3 005a ffd8 
	ffe9 fffb fff2 ffb4 ffe8 0000 005c 00a5 
	ff88 ff9a ffd9 ffe4 fff9 ffd1 ff8a 0037 
	ffd9 ff91 ffd8 ffdb 0019 ffca 003f 0021 

[MCU #40] ZZ:
[Y]:
	ff78 ffe9 ffd2 ffc5 0030 fff5 0035 ffe9 
	0001 fff7 0010 ffa4 ff6d 0043 0019 000d 
	0004 0000 ffff ffdd ffe9 ff88 fffb ffc1 
	0017 fff6 0040 ffc5 ff53 ffe5 ffca 00bc 
	0037 fff2 ff9a ffd9 ff91 ffd9 ffb4 004c 
	ffba ff86 ffb0 003a 0067 ffb3 ffe8 ffe4 
	ffd8 ffdb fff9 0000 005a fff7 ffd8 005c 
	ffd1 0019 ffca ff8a 00a5 0037 003f 0021 

[MCU #40] Quantification:
[Y]:
	ffe5 fff9 fff1 fff5 0006 0000 0003 ffff 
	0000 fffe 0004 fff1 ffee 0003 0001 0000 
	0001 0000 0000 fffb ffff fff9 0000 fffd 
	0005 fffe 0009 fffa fff5 ffff fffe 0009 
	000b fffe fff7 fffe fffb ffff fffe 0003 
	fff6 fff5 fffc 0003 0004 fffe 0000 ffff 
	fffe ffff 0000 0000 0002 0000 ffff 0003 
	fffe 0000 ffff fffc 0004 0001 0002 0001 

[MCU #40] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -44, magnitude = 6, index = 19
		bitstream => writing 14 over 4 bits
		bitstream => writing 19 over 6 bits

AC:
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 35, huffman path = 1015, nb_bits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
[MCU #41] Valeurs "niveaux de gris" initiales:
db 0d 0d 0d 0d 0d 0d 0d    
70 19 19 19 19 19 19 19    
50 ed ed ed ed ed ed ed    
1c 32 32 32 32 32 32 32    
87 62 62 62 62 62 62 62    
38 71 71 71 71 71 71 71    
9e 2b 2b 2b 2b 2b 2b 2b    
9e 4d 4d 4d 4d 4d 4d 4d    

[MCU #41] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	db 0d 0d 0d 0d 0d 0d 0d 
	70 19 19 19 19 19 19 19 
	50 ed ed ed ed ed ed ed 
	1c 32 32 32 32 32 32 32 
	87 62 62 62 62 62 62 62 
	38 71 71 71 71 71 71 71 
	9e 2b 2b 2b 2b 2b 2b 2b 
	9e 4d 4d 4d 4d 4d 4d 4d 

[MCU #41] Downsampling:
[Y]:
	db 0d 0d 0d 0d 0d 0d 0d 
	70 19 19 19 19 19 19 19 
	50 ed ed ed ed ed ed ed 
	1c 32 32 32 32 32 32 32 
	87 62 62 62 62 62 62 62 
	38 71 71 71 71 71 71 71 
	9e 2b 2b 2b 2b 2b 2b 2b 
	9e 4d 4d 4d 4d 4d 4d 4d 

[MCU #41] DCT:
[Y]:
	feb5 0032 002f 002a 0024 001c 0013 000a 
	ffec 0007 0007 0006 0005 0004 0003 0001 
	ff65 0064 005e 0055 0048 0039 0027 0014 
	ff5e 003a 0037 0031 002a 0021 0016 000b 
	ff74 0036 0033 002e 0027 001e 0015 000a 
	ffd6 0006 0006 0005 0005 0003 0002 0001 
	011f ffbc ffc0 ffc6 ffcf ffda ffe6 fff3 
	00d3 0003 0003 0003 0002 0002 0001 0000 

[MCU #41] ZZ:
[Y]:
	feb5 0032 ffec ff65 0007 002f 002a 0007 
	0064 ff5e ff74 003a 005e 0006 0024 001c 
	0005 0055 0037 0036 ffd6 011f 0006 0033 
	0031 0048 0004 0013 000a 0003 0039 002a 
	002e 0006 ffbc 00d3 0003 ffc0 0005 0027 
	0021 0027 0001 0014 0016 001e 0005 ffc6 
	0003 0003 ffcf 0003 0015 000b 000a 0002 
	ffda 0002 0002 ffe6 0001 fff3 0001 0000 

[MCU #41] Quantification:
[Y]:
	ffbe 0010 fffa ffe1 0001 0003 0002 0000 
	0019 ffd8 ffdd 0009 000b 0000 0002 0001 
	0001 0015 000b 0007 fffd 0010 0000 0003 
	000c 000e 0000 0002 0000 0000 0002 0002 
	0009 0000 fffa 000c 0000 ffff 0000 0001 
	0004 0003 0000 0001 0000 0000 0000 fffe 
	0000 0000 fffe 0000 0000 0000 0000 0000 
	ffff 0000 0000 0000 0000 0000 0000 0000 

[MCU #41] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -39, magnitude = 6, index = 24
		bitstream => writing 14 over 4 bits
		bitstream => writing 24 over 6 bits

AC:
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -31, magnitude = 5, index = 0
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 0 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 25, magnitude = 5, index = 25
	RLE code = 21, huffman path = 2038, nb_bits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 25 over 5 bits
	value = -40, magnitude = 6, index = 23
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 23 over 6 bits
	value = -35, magnitude = 6, index = 28
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 28 over 6 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 21, magnitude = 5, index = 21
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 21 over 5 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 16, magnitude = 5, index = 16
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 16 over 5 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 1 over 3 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 81, huffman path = 122, nb_bits = 7
		bitstream => writing 122 over 7 bits
		bitstream => writing 0 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #42] Valeurs "niveaux de gris" initiales:
1c 48 7c 59 c1 08 15 a1    
ca 69 47 d0 23 fe 76 51    
ca 69 47 d0 23 fe 76 51    
ca 69 47 d0 23 fe 76 51    
ca 69 47 d0 23 fe 76 51    
ca 69 47 d0 23 fe 76 51    
ca 69 47 d0 23 fe 76 51    
ca 69 47 d0 23 fe 76 51    

[MCU #42] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	1c 48 7c 59 c1 08 15 a1 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 

[MCU #42] Downsampling:
[Y]:
	1c 48 7c 59 c1 08 15 a1 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 
	ca 69 47 d0 23 fe 76 51 

[MCU #42] DCT:
[Y]:
	0002 0029 ffec 00c7 000b 00c7 0087 feb2 
	ffbf ffec ffe8 ffa7 002e ffa4 ffe6 006a 
	ffc3 ffed ffea ffad 002b ffaa ffe7 0064 
	ffc9 ffef ffec ffb5 0027 ffb2 ffea 005a 
	ffd1 fff2 ffef ffc0 0021 ffbe ffed 004c 
	ffdb fff5 fff3 ffce 001a ffcc fff1 003c 
	ffe7 fff8 fff7 ffde 0012 ffdd fff6 0029 
	fff3 fffc fffc ffef 0009 ffee fffb 0015 

[MCU #42] ZZ:
[Y]:
	0002 0029 ffbf ffc3 ffec ffec 00c7 ffe8 
	ffed ffc9 ffd1 ffef ffea ffa7 000b 00c7 
	002e ffad ffec fff2 ffdb ffe7 fff5 ffef 
	ffb5 002b ffa4 0087 feb2 ffe6 ffaa 0027 
	ffc0 fff3 fff8 fff3 fffc fff7 ffce 0021 
	ffb2 ffe7 006a 0064 ffea ffbe 001a ffde 
	fffc ffef 0012 ffcc ffed 005a 004c fff1 
	ffdd 0009 ffee fff6 003c 0029 fffb 0015 

[MCU #42] Quantification:
[Y]:
	0000 000d ffeb fff4 fffe ffff 000d ffff 
	fffc fff3 fff5 fffe fffe fffb 0000 000b 
	000b ffec fffc fffe fffd ffff 0000 ffff 
	ffee 0008 fff3 000f ffea ffff fffd 0002 
	fff4 ffff 0000 0000 0000 0000 ffff 0001 
	fff5 fffe 0006 0005 0000 fffe 0000 ffff 
	0000 0000 0000 fffe 0000 0002 0002 0000 
	ffff 0000 0000 0000 0001 0001 0000 0000 

[MCU #42] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 66, magnitude = 7, index = 66
		bitstream => writing 30 over 5 bits
		bitstream => writing 66 over 7 bits

AC:
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = -21, magnitude = 5, index = 10
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 10 over 5 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 11 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -20, magnitude = 5, index = 11
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 11 over 5 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = -22, magnitude = 5, index = 9
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 9 over 5 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 65, huffman path = 59, nb_bits = 6
		bitstream => writing 59 over 6 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 1 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 49, huffman path = 58, nb_bits = 6
		bitstream => writing 58 over 6 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #43] Valeurs "niveaux de gris" initiales:
01 70 1e 25 e3 94 9c 56    
3e 4e 1d cc 42 32 d5 90    
3e 4e 1d cc 42 32 d5 90    
3e 4e 1d cc 42 32 d5 90    
3e 4e 1d cc 42 32 d5 90    
3e 4e 1d cc 42 32 d5 90    
3e 4e 1d cc 42 32 d5 90    
3e 4e 1d cc 42 32 d5 90    

[MCU #43] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	01 70 1e 25 e3 94 9c 56 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 

[MCU #43] Downsampling:
[Y]:
	01 70 1e 25 e3 94 9c 56 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 
	3e 4e 1d cc 42 32 d5 90 

[MCU #43] DCT:
[Y]:
	ff48 fefe 0004 ffa3 0050 00d3 fed5 ff9d 
	fff8 fff5 ffdb 003f ffde ffa3 0011 002e 
	fff8 fff6 ffde 003b ffe0 ffa8 0010 002b 
	fff9 fff7 ffe1 0035 ffe3 ffb1 000e 0027 
	fffa fff9 ffe6 002d ffe7 ffbd 000c 0021 
	fffc fffa ffec 0023 ffed ffcb 0009 001a 
	fffd fffc fff2 0018 fff3 ffdc 0006 0012 
	ffff fffe fff9 000c fffa ffee 0003 0009 

[MCU #43] ZZ:
[Y]:
	ff48 fefe fff8 fff8 fff5 0004 ffa3 ffdb 
	fff6 fff9 fffa fff7 ffde 003f 0050 00d3 
	ffde 003b ffe1 fff9 fffc fffd fffa ffe6 
	0035 ffe0 ffa3 fed5 ff9d 0011 ffa8 ffe3 
	002d ffec fffc ffff fffe fff2 0023 ffe7 
	ffb1 0010 002e 002b 000e ffbd ffed 0018 
	fff9 000c fff3 ffcb 000c 0027 0021 0009 
	ffdc fffa ffee 0006 001a 0012 0003 0009 

[MCU #43] Quantification:
[Y]:
	ffdc ffaa fffe ffff ffff 0000 fffa fffe 
	fffe ffff ffff ffff fffc 0003 0004 000c 
	fff8 000e fffa ffff 0000 0000 0000 ffff 
	000d fffa fff3 ffdf fffa 0000 fffd ffff 
	0009 fffe 0000 0000 0000 0000 0001 ffff 
	fff5 0001 0002 0002 0000 fffe 0000 0000 
	0000 0000 0000 fffe 0000 0001 0000 0000 
	ffff 0000 0000 0000 0000 0000 0000 0000 

[MCU #43] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -36, magnitude = 6, index = 27
		bitstream => writing 14 over 4 bits
		bitstream => writing 27 over 6 bits

AC:
	value = -86, magnitude = 7, index = 41
	RLE code = 7, huffman path = 248, nb_bits = 8
		bitstream => writing 248 over 8 bits
		bitstream => writing 41 over 7 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 1 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 14, magnitude = 4, index = 14
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 14 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 49, huffman path = 58, nb_bits = 6
		bitstream => writing 58 over 6 bits
		bitstream => writing 0 over 1 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -33, magnitude = 6, index = 30
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 30 over 6 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 65, huffman path = 59, nb_bits = 6
		bitstream => writing 59 over 6 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 82, huffman path = 2039, nb_bits = 11
		bitstream => writing 2039 over 11 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #44] Valeurs "niveaux de gris" initiales:
64 08 18 3c 8c 22 05 ba    
08 e7 f2 7f f9 c5 14 31    
08 e7 f2 7f f9 c5 14 31    
08 e7 f2 7f f9 c5 14 31    
08 e7 f2 7f f9 c5 14 31    
08 e7 f2 7f f9 c5 14 31    
08 e7 f2 7f f9 c5 14 31    
08 e7 f2 7f f9 c5 14 31    

[MCU #44] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	64 08 18 3c 8c 22 05 ba 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 

[MCU #44] Downsampling:
[Y]:
	64 08 18 3c 8c 22 05 ba 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 
	08 e7 f2 7f f9 c5 14 31 

[MCU #44] DCT:
[Y]:
	001c 0096 fe46 ffbd ff53 fe5c 004d 0030 
	ff9e ffc6 0069 0008 0074 0031 0005 0004 
	ffa4 ffc9 0063 0007 006d 002e 0005 0004 
	ffad ffcf 0059 0007 0062 002a 0004 0004 
	ffba ffd6 004b 0005 0054 0023 0004 0003 
	ffc9 ffdf 003b 0004 0041 001c 0003 0002 
	ffda ffea 0029 0003 002d 0013 0002 0001 
	ffed fff5 0014 0001 0017 0009 0001 0000 

[MCU #44] ZZ:
[Y]:
	001c 0096 ff9e ffa4 ffc6 fe46 ffbd 0069 
	ffc9 ffad ffba ffcf 0063 0008 ff53 fe5c 
	0074 0007 0059 ffd6 ffc9 ffda ffdf 004b 
	0007 006d 0031 004d 0030 0005 002e 0062 
	0005 003b ffea ffed fff5 0029 0004 0054 
	002a 0005 0004 0004 0004 0023 0041 0003 
	0014 0001 002d 001c 0004 0004 0003 0003 
	0013 0017 0009 0002 0002 0001 0001 0000 

[MCU #44] Quantification:
[Y]:
	0005 0032 ffe0 ffee fff8 ffdc fffc 0005 
	fff3 ffec ffef fff8 000c 0000 fff7 ffe8 
	001d 0001 0011 fffa fffc fffe ffff 0004 
	0001 0015 0007 0008 0003 0000 0001 0005 
	0001 0008 fffe ffff 0000 0001 0000 0003 
	0006 0000 0000 0000 0000 0001 0001 0000 
	0001 0000 0001 0001 0000 0000 0000 0000 
	0000 0000 0000 0000 0000 0000 0000 0000 

[MCU #44] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 41, magnitude = 6, index = 41
		bitstream => writing 14 over 4 bits
		bitstream => writing 41 over 6 bits

AC:
	value = 50, magnitude = 6, index = 50
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 50 over 6 bits
	value = -32, magnitude = 6, index = 31
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 31 over 6 bits
	value = -18, magnitude = 5, index = 13
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 13 over 5 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = -36, magnitude = 6, index = 27
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 27 over 6 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 2 over 4 bits
	value = -20, magnitude = 5, index = 11
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 11 over 5 bits
	value = -17, magnitude = 5, index = 14
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 14 over 5 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 7 over 4 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 6 over 4 bits
	value = -24, magnitude = 5, index = 7
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 7 over 5 bits
	value = 29, magnitude = 5, index = 29
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 29 over 5 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 17, magnitude = 5, index = 17
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 17 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 21, magnitude = 5, index = 21
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 21 over 5 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 3 over 2 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 65, huffman path = 59, nb_bits = 6
		bitstream => writing 59 over 6 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #45] Valeurs "niveaux de gris" initiales:
b7 a6 2e 40 d8 cc 8d f4    
7a 3e 05 86 cc e2 ab 97    
7a 3e 05 86 cc e2 ab 97    
7a 3e 05 86 cc e2 ab 97    
7a 3e 05 86 cc e2 ab 97    
7a 3e 05 86 cc e2 ab 97    
7a 3e 05 86 cc e2 ab 97    
7a 3e 05 86 cc e2 ab 97    

[MCU #45] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	b7 a6 2e 40 d8 cc 8d f4 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 

[MCU #45] Downsampling:
[Y]:
	b7 a6 2e 40 d8 cc 8d f4 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 
	7a 3e 05 86 cc e2 ab 97 

[MCU #45] DCT:
[Y]:
	004a fea9 ffd3 0159 0093 ffcd ffe0 ffb5 
	0020 0018 0035 fff0 0000 ffce 0007 000c 
	001e 0016 0032 fff1 0000 ffd1 0007 000c 
	001b 0014 002d fff2 0000 ffd6 0006 000a 
	0017 0011 0026 fff4 0000 ffdc 0005 0009 
	0012 000d 001e fff7 0000 ffe4 0004 0007 
	000c 0009 0014 fffa 0000 ffed 0002 0004 
	0006 0004 000a fffd 0000 fff6 0001 0002 

[MCU #45] ZZ:
[Y]:
	004a fea9 0020 001e 0018 ffd3 0159 0035 
	0016 001b 0017 0014 0032 fff0 0093 ffcd 
	0000 fff1 002d 0011 0012 000c 000d 0026 
	fff2 0000 ffce ffe0 ffb5 0007 ffd1 0000 
	fff4 001e 0009 0006 0004 0014 fff7 0000 
	ffd6 0007 000c 000c 0006 ffdc 0000 fffa 
	000a fffd 0000 ffe4 0005 000a 0009 0004 
	ffed 0000 fff6 0002 0007 0004 0001 0002 

[MCU #45] Quantification:
[Y]:
	000e ff8e 000a 0006 0003 fffd 0017 0002 
	0005 0006 0005 0003 0006 0000 0008 fffd 
	0000 fffd 0009 0002 0001 0000 0000 0002 
	fffd 0000 fff9 fffd fffb 0000 ffff 0000 
	fffe 0004 0000 0000 0000 0000 0000 0000 
	fffa 0000 0000 0000 0000 ffff 0000 0000 
	0000 0000 0000 ffff 0000 0000 0000 0000 
	0000 0000 0000 0000 0000 0000 0000 0000 

[MCU #45] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 9, magnitude = 4, index = 9
		bitstream => writing 5 over 3 bits
		bitstream => writing 9 over 4 bits

AC:
	value = -114, magnitude = 7, index = 13
	RLE code = 7, huffman path = 248, nb_bits = 8
		bitstream => writing 248 over 8 bits
		bitstream => writing 13 over 7 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 23, magnitude = 5, index = 23
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 23 over 5 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 20, huffman path = 502, nb_bits = 9
		bitstream => writing 502 over 9 bits
		bitstream => writing 8 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 34, huffman path = 249, nb_bits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 2 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -7, magnitude = 3, index = 0
	RLE code = 19, huffman path = 121, nb_bits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 0 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 99, huffman path = 65446, nb_bits = 16
		bitstream => writing 65446 over 16 bits
		bitstream => writing 1 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 65, huffman path = 59, nb_bits = 6
		bitstream => writing 59 over 6 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 81, huffman path = 122, nb_bits = 7
		bitstream => writing 122 over 7 bits
		bitstream => writing 0 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #46] Valeurs "niveaux de gris" initiales:
14 09 4d d6 11 62 77 12    
4b f2 67 6e f0 dd c0 2e    
4b f2 67 6e f0 dd c0 2e    
4b f2 67 6e f0 dd c0 2e    
4b f2 67 6e f0 dd c0 2e    
4b f2 67 6e f0 dd c0 2e    
4b f2 67 6e f0 dd c0 2e    
4b f2 67 6e f0 dd c0 2e    

[MCU #46] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	14 09 4d d6 11 62 77 12 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 

[MCU #46] Downsampling:
[Y]:
	14 09 4d d6 11 62 77 12 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 
	4b f2 67 6e f0 dd c0 2e 

[MCU #46] DCT:
[Y]:
	007a ffdc ff0c 00ee ff01 ff65 ff11 ffef 
	ff8f fff6 fffa ffbf 002b 006a 0026 ffda 
	ff95 fff7 fffa ffc3 0029 0063 0024 ffdc 
	ffa0 fff8 fffb ffc9 0025 0059 0021 ffe0 
	ffae fff9 fffc ffd1 001f 004c 001c ffe5 
	ffc0 fffb fffd ffdb 0018 003c 0016 ffeb 
	ffd4 fffc fffe ffe7 0011 0029 000f fff2 
	ffea fffe ffff fff3 0008 0015 0007 fff9 

[MCU #46] ZZ:
[Y]:
	007a ffdc ff8f ff95 fff6 ff0c 00ee fffa 
	fff7 ffa0 ffae fff8 fffa ffbf ff01 ff65 
	002b ffc3 fffb fff9 ffc0 ffd4 fffb fffc 
	ffc9 0029 006a ff11 ffef 0026 0063 0025 
	ffd1 fffd fffc ffea fffe fffe ffdb 001f 
	0059 0024 ffda ffdc 0021 004c 0018 ffe7 
	ffff fff3 0011 003c 001c ffe0 ffe5 0016 
	0029 0008 0015 000f ffeb fff2 0007 fff9 

[MCU #46] Quantification:
[Y]:
	0018 fff4 ffdb ffeb ffff ffec 000f 0000 
	fffe ffe8 ffec ffff 0000 fffd fff2 fff7 
	000a fff1 ffff ffff fffb fffe 0000 0000 
	fff3 0008 000f ffe6 ffff 0001 0004 0001 
	fff7 0000 0000 ffff 0000 0000 ffff 0001 
	000c 0003 fffe ffff 0001 0002 0000 0000 
	0000 0000 0000 0002 0000 0000 0000 0000 
	0001 0000 0000 0000 0000 0000 0000 0000 

[MCU #46] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 10, magnitude = 4, index = 10
		bitstream => writing 5 over 3 bits
		bitstream => writing 10 over 4 bits

AC:
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = -37, magnitude = 6, index = 26
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 26 over 6 bits
	value = -21, magnitude = 5, index = 10
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 10 over 5 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -20, magnitude = 5, index = 11
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 11 over 5 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -24, magnitude = 5, index = 7
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 7 over 5 bits
	value = -20, magnitude = 5, index = 11
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 11 over 5 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -14, magnitude = 4, index = 1
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 4 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = -15, magnitude = 4, index = 0
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -13, magnitude = 4, index = 2
	RLE code = 36, huffman path = 4084, nb_bits = 12
		bitstream => writing 4084 over 12 bits
		bitstream => writing 2 over 4 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = -26, magnitude = 5, index = 5
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 5 over 5 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 12, magnitude = 4, index = 12
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 12 over 4 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 82, huffman path = 2039, nb_bits = 11
		bitstream => writing 2039 over 11 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 65, huffman path = 59, nb_bits = 6
		bitstream => writing 59 over 6 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #47] Valeurs "niveaux de gris" initiales:
d2 95 38 b5 2a d4 0c 8e    
2c dd fa 6e 0f d0 fe 17    
2c dd fa 6e 0f d0 fe 17    
2c dd fa 6e 0f d0 fe 17    
2c dd fa 6e 0f d0 fe 17    
2c dd fa 6e 0f d0 fe 17    
2c dd fa 6e 0f d0 fe 17    
2c dd fa 6e 0f d0 fe 17    

[MCU #47] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	d2 95 38 b5 2a d4 0c 8e 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 

[MCU #47] Downsampling:
[Y]:
	d2 95 38 b5 2a d4 0c 8e 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 
	2c dd fa 6e 0f d0 fe 17 

[MCU #47] DCT:
[Y]:
	0055 0040 ffd4 ffbc fd8a 00a0 ffec ff9a 
	ffec 0015 001e 002b 0099 ffde 002d ffb9 
	ffed 0013 001c 0028 0090 ffe0 002a ffbd 
	ffef 0011 001a 0024 0082 ffe3 0026 ffc4 
	fff1 000f 0016 001f 006e ffe7 0020 ffcd 
	fff5 000b 0011 0018 0057 ffed 0019 ffd8 
	fff8 0008 000b 0010 003c fff3 0011 ffe4 
	fffc 0004 0006 0008 001e fffa 0009 fff2 

[MCU #47] ZZ:
[Y]:
	0055 0040 ffec ffed 0015 ffd4 ffbc 001e 
	0013 ffef fff1 0011 001c 002b fd8a 00a0 
	0099 0028 001a 000f fff5 fff8 000b 0016 
	0024 0090 ffde ffec ff9a 002d ffe0 0082 
	001f 0011 0008 fffc 0004 000b 0018 006e 
	ffe3 002a ffb9 ffbd 0026 ffe7 0057 0010 
	0006 0008 003c ffed 0020 ffc4 ffcd 0019 
	fff3 001e fffa 0011 ffd8 ffe4 0009 fff2 

[MCU #47] Quantification:
[Y]:
	0011 0015 fffa fffd 0003 fffd fffc 0001 
	0004 fffc fffd 0002 0003 0002 ffdd 0009 
	0026 000a 0005 0002 0000 0000 0000 0001 
	0009 001c fffc fffe fffa 0001 ffff 0006 
	0006 0002 0000 0000 0000 0000 0000 0004 
	fffc 0003 fffc fffd 0001 0000 0002 0000 
	0000 0000 0002 0000 0001 ffff ffff 0000 
	0000 0001 0000 0000 ffff 0000 0000 0000 

[MCU #47] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -7, magnitude = 3, index = 0
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 3 bits

AC:
	value = 21, magnitude = 5, index = 21
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 21 over 5 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -35, magnitude = 6, index = 28
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 28 over 6 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 38, magnitude = 6, index = 38
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 38 over 6 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 49, huffman path = 58, nb_bits = 6
		bitstream => writing 58 over 6 bits
		bitstream => writing 1 over 1 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 28, magnitude = 5, index = 28
	RLE code = 5, huffman path = 26, nb_bits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 28 over 5 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 83, huffman path = 65438, nb_bits = 16
		bitstream => writing 65438 over 16 bits
		bitstream => writing 4 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nb_bits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 50, huffman path = 503, nb_bits = 9
		bitstream => writing 503 over 9 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nb_bits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
[MCU #48] Valeurs "niveaux de gris" initiales:
dc 24 24 24 24 24 24 24    
b7 f1 f1 f1 f1 f1 f1 f1    
b7 f1 f1 f1 f1 f1 f1 f1    
b7 f1 f1 f1 f1 f1 f1 f1    
b7 f1 f1 f1 f1 f1 f1 f1    
b7 f1 f1 f1 f1 f1 f1 f1    
b7 f1 f1 f1 f1 f1 f1 f1    
b7 f1 f1 f1 f1 f1 f1 f1    

[MCU #48] Conversion "niveaux de gris" -> YCbCr:
[Y]:
	dc 24 24 24 24 24 24 24 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 

[MCU #48] Downsampling:
[Y]:
	dc 24 24 24 24 24 24 24 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 
	b7 f1 f1 f1 f1 f1 f1 f1 

[MCU #48] DCT:
[Y]:
	029f ffda ffdc ffe0 ffe5 ffeb fff1 fff9 
	ff0e 003a 0036 0031 0029 0020 0016 000b 
	ff1c 0036 0033 002e 0027 001f 0015 000a 
	ff33 0031 002e 0029 0023 001b 0013 0009 
	ff52 0029 0027 0023 001e 0017 0010 0008 
	ff77 0020 001f 001b 0017 0012 000c 0006 
	ffa2 0016 0015 0013 0010 000c 0008 0004 
	ffd0 000b 000a 0009 0008 0006 0004 0002 

[MCU #48] ZZ:
[Y]:
	029f ffda ff0e ff1c 003a ffdc ffe0 0036 
	0036 ff33 ff52 0031 0033 0031 ffe5 ffeb 
	0029 002e 002e 0029 ff77 ffa2 0020 0027 
	0029 0027 0020 fff1 fff9 0016 001f 0023 
	0023 001f 0016 ffd0 000b 0015 001b 001e 
	001b 0015 000b 000a 0013 0017 0017 0013 
	000a 0009 0010 0012 0010 0009 0008 000c 
	000c 0008 0006 0008 0006 0004 0004 0002 

[MCU #48] Quantification:
[Y]:
	0086 fff4 ffb0 ffd3 0008 fffd fffe 0003 
	000d ffcd ffd5 0008 0006 0002 ffff ffff 
	000a 000b 0009 0005 fff5 fffb 0001 0002 
	000a 0007 0004 ffff 0000 0000 0001 0001 
	0007 0004 0002 fffe 0000 0000 0000 0001 
	0003 0001 0000 0000 0000 0000 0000 0000 
	0000 0000 0000 0000 0000 0000 0000 0000 
	0000 0000 0000 0000 0000 0000 0000 0000 

[MCU #48] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = 117, magnitude = 7, index = 117
		bitstream => writing 30 over 5 bits
		bitstream => writing 117 over 7 bits

AC:
	value = -12, magnitude = 4, index = 3
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 3 over 4 bits
	value = -80, magnitude = 7, index = 47
	RLE code = 7, huffman path = 248, nb_bits = 8
		bitstream => writing 248 over 8 bits
		bitstream => writing 47 over 7 bits
	value = -45, magnitude = 6, index = 18
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 18 over 6 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 13 over 4 bits
	value = -51, magnitude = 6, index = 12
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 12 over 6 bits
	value = -43, magnitude = 6, index = 20
	RLE code = 6, huffman path = 120, nb_bits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 20 over 6 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 8 over 4 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -11, magnitude = 4, index = 4
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 4 over 4 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 10, magnitude = 4, index = 10
	RLE code = 4, huffman path = 11, nb_bits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 10 over 4 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nb_bits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 7 over 3 bits
	value = 4, magnitude = 3, index = 4
	RLE code = 3, huffman path = 4, nb_bits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 4 over 3 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 49, huffman path = 58, nb_bits = 6
		bitstream => writing 58 over 6 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nb_bits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nb_bits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 10, nb_bits = 4
		bitstream => writing 10 over 4 bits
